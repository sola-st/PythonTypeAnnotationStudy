[
    {
        "execution_time": "",
        "machine": {
            "OS": "Linux-4.15.0-166-generic-x86_64-with-Ubuntu-18.04-bionic",
            "CPU": "x86_64",
            "CORES": 48
        },
        "total_repositories": 1,
        "total_commits": 3230,
        "commit_year_dict": {
            "2019": 1149,
            "2020": 1156,
            "2017": 104,
            "2018": 522,
            "2021": 299
        },
        "loc_year_edit": {
            "2019": 357208,
            "2020": 1559736,
            "2017": 1601641,
            "2018": 6761130,
            "2021": 311733
        },
        "s0": "------------------------------------------------------------------------",
        "RQ0": "How many types are used?",
        "code_changes": [],
        "commit_statistics": [],
        "repo_with_types_changes": 1,
        "percentage_repo_with_typeChanges": "",
        "commits_with_typeChanges": 203,
        "percentage_commits_with_typeChanges": "",
        "total_typeAnnotation_codeChanges": 2451,
        "s1": "------------------------------------------------------------------------",
        "RQ1": "Are type annotation inserted, removed and changed?",
        "insert_types": {
            "2019": 109,
            "2020": 1012,
            "2017": 11,
            "2018": 79,
            "2021": 297
        },
        "percentage_insert_types": "",
        "remove_types": {
            "2019": 75,
            "2020": 598,
            "2018": 55,
            "2021": 118
        },
        "percentage_remove_types": "",
        "modify_existing_types": {
            "2019": 21,
            "2020": 56,
            "2018": 1,
            "2021": 19
        },
        "percentage_modify_existing_types": "",
        "s2": "------------------------------------------------------------------------",
        "RQ2_1": "What types are added (generic, numeric, ...)?",
        "anyType_added": 0,
        "noneType_added": 0,
        "numericType_added": 0,
        "binarySequenceType_added": 0,
        "textSequenceType_added": 0,
        "mappingTypes_added": 0,
        "setTypes_added": 0,
        "sequenceType_added": 0,
        "newType_added": 0,
        "total_added": 1508,
        "RQ2_2": "What are the top 5 types added?",
        "typeAdded_dict": {
            "float": 185,
            "dict": 176,
            "bool": 102,
            "str": 110,
            "int": 360,
            "base.binaryclassifier": 3,
            "types.label": 3,
            "'regressor'": 1,
            "'classifier'": 3,
            "'regressionmetric'": 1,
            "'base.label'": 2,
            "'proba.multinomial'": 2,
            "list": 47,
            "collections.defaultdict": 2,
            "'anomalydetector'": 2,
            "typing.hashable": 4,
            "'binaryclassifier'": 1,
            "attribute(\n    value=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='dict',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [bool,float]": 1,
            "'multiclassifier'": 1,
            "attribute(\n    value=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='dict',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [typing,float]": 2,
            "attribute(\n    value=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='union',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [typing,none]": 1,
            "'clusterer'": 2,
            "'transformer'": 1,
            "base.estimator": 7,
            "attribute(\n    value=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='list',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [typing [str,str,str]]": 1,
            "attribute(\n    value=name(\n        value='base',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n).stream": 6,
            "'sklearn.utils.bunch'": 2,
            "typing.iterator": 2,
            "attribute(\n    value=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='iterator',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [dict]": 3,
            "base.metric": 3,
            "dt.timedelta": 1,
            "base.optimizer": 3,
            "attribute(\n    value=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='dict',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [str,str]": 2,
            "callable": 7,
            "stats.univariate": 9,
            "base.classifier": 22,
            "base.regressor": 19,
            "typing.callable": 1,
            "stats.bivariate": 2,
            "typing.any": 3,
            "base.recommender": 2,
            "proba.multinomial": 4,
            "'base.estimator'": 2,
            "bin": 4,
            "pd.dataframe": 30,
            "attribute(\n    value=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='list',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [base]": 2,
            "activelearningnode": 8,
            "splitnode": 27,
            "inactivelearningnode": 4,
            "basedriftdetector": 20,
            "arfhoeffdingtree": 3,
            "multilabellearningnode": 4,
            "hoeffdingtree.splitnode": 8,
            "lcactivelearningnode": 3,
            "hoeffdingtree.activelearningnode": 2,
            "regressionhoeffdingtree": 8,
            "anytimesplitnode": 8,
            "anytimeactivelearningnode": 2,
            "anytimeinactivelearningnode": 2,
            "hoeffdingtreeregressor": 1,
            "np.ndarray": 12,
            "np.random": 5,
            "deque": 2,
            "numbers.number": 3,
            "attribute(\n    value=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='tuple',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [bool,bool]": 2,
            "attribute(\n    value=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='tuple',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [np,base]": 2,
            "typing.set": 9,
            "attribute(\n    value=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='tuple',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [dict,dict]": 6,
            "tuple": 10,
            "confusionmatrix": 9,
            "multilabelconfusionmatrix": 3,
            "base.syntheticdataset": 4,
            "attribute(\n    value=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='dict',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [str,typing]": 2,
            "sklearn_base.baseestimator": 2,
            "sklearn_base.classifiermixin": 1,
            "metrics.metric": 12,
            "'base.regressionmetric'": 1,
            "'forecaster'": 1,
            "set": 10,
            "efdtsplitnode": 2,
            "activeleaf": 6,
            "inactiveleaf": 4,
            "learningnode": 5,
            "foundnode": 2,
            "instanceconditionaltest": 3,
            "node": 3,
            "type [nt]": 3,
            "attribute(\n    value=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='list',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [foundnode]": 1,
            "union [dict,stats]": 1,
            "typing.list": 4,
            "list [attributesplitsuggestion]": 1,
            "union [dict,var]": 5,
            "dict [int,node]": 3,
            "'attributeobserver'": 1,
            "attributesplitsuggestion": 1,
            "tuple [int,...]": 1,
            "random.random": 3,
            "pd.series": 6,
            "base.transformer": 3,
            "attribute(\n    value=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='list',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [track]": 1,
            "typing.iterable": 3,
            "splitter": 5,
            "union [\"branch\",\"leaf\"]": 1,
            "iterable [union [\"branch\",\"leaf\"]]": 1,
            "\"leaf\"": 2,
            "et": 7,
            "branch": 1,
            "union [branch,leaf]": 1,
            "attribute(\n    value=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='type',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [htbranch]": 1,
            "attribute(\n    value=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='type',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [adabranchclassifier]": 1,
            "attribute(\n    value=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='type',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [adabranchregressor]": 1,
            "htleaf": 2,
            "attribute(\n    value=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='list',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [htleaf]": 2,
            "attribute(\n    value=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='list',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [branchfactory]": 1,
            "\"metrics.confusionmatrix\"": 2,
            "list [base]": 3,
            "gradhess": 5,
            "optional [dict [featurename,union [dict [hashable,gradhessstats],dynamicquantizer,staticquantizer]]]": 1,
            "attribute(\n    value=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='tuple',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [branchfactory,bool]": 2,
            "branchfactory": 1,
            "optional [float]": 1,
            "attribute(\n    value=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='iterable',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [optim]": 2,
            "iterator [estimator]": 3,
            "arm": 4,
            "any": 2,
            "banditsolver": 1,
            "metrics.regressionmetric": 2,
            "metric": 2,
            "list [regressor]": 3,
            "regressionmetric": 6,
            "optional [union [str,list [str]]]": 2,
            "dict [str,union [int,tuple [int]]]": 1,
            "union [int,tuple [int]]": 1,
            "dataset": 3,
            "forecaster": 2,
            "timeseries": 1,
            "horizonmetric": 2,
            "list [number]": 2,
            "\"forecastingmetric\"": 1,
            "list [float]": 1,
            "\"anomalydetector\"": 1,
            "anomalydetector": 3,
            "bandit": 4,
            "banditpolicy": 2,
            "iterator [arm]": 4,
            "iterable": 1,
            "estimator": 3,
            "iterator [callable]": 1
        },
        "RQ2_3": "What types are removed (generic, numeric, ...)?",
        "anyType_removed": 0,
        "noneType_removed": 0,
        "numericType_removed": 0,
        "binarySequenceType_removed": 0,
        "textSequenceType_removed": 0,
        "mappingTypes_removed": 0,
        "setTypes_removed": 0,
        "sequenceType_removed": 0,
        "newType_removed": 0,
        "total_removed": 846,
        "RQ2_4": "What are the top 5 types removed?",
        "typeRemoved_dict": {
            "float": 94,
            "dict": 111,
            "str": 81,
            "stats.runningstatistic": 1,
            "int": 194,
            "types.label": 2,
            "bool": 50,
            "'base.label'": 2,
            "'proba.multinomial'": 2,
            "typing.hashable": 3,
            "'classifier'": 1,
            "attribute(\n    value=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='union',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [typing,none]": 1,
            "'base.estimator'": 2,
            "base.binaryclassifier": 2,
            "typing.callable": 1,
            "stats.univariate": 4,
            "attribute(\n    value=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='iterator',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [dict]": 2,
            "basedriftdetector": 8,
            "arfhoeffdingtree": 2,
            "activelearningnode": 9,
            "splitnode": 28,
            "inactivelearningnode": 2,
            "multilabellearningnode": 2,
            "hoeffdingtree.splitnode": 4,
            "lcactivelearningnode": 3,
            "hoeffdingtree.activelearningnode": 1,
            "regressionhoeffdingtree": 4,
            "anytimesplitnode": 6,
            "anytimeactivelearningnode": 2,
            "anytimeinactivelearningnode": 2,
            "attribute(\n    value=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='dict',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [str,str]": 2,
            "list": 20,
            "attribute(\n    value=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='tuple',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [dict,dict]": 4,
            "confusionmatrix": 6,
            "multilabelconfusionmatrix": 2,
            "typing.any": 2,
            "base.classifier": 11,
            "'anomalydetector'": 1,
            "'clusterer'": 1,
            "numbers.number": 1,
            "attribute(\n    value=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='tuple',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [bool,bool]": 1,
            "sklearn_base.baseestimator": 2,
            "sklearn_base.classifiermixin": 1,
            "base.estimator": 4,
            "attribute(\n    value=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='dict',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [str,typing]": 1,
            "base.syntheticdataset": 2,
            "tuple": 5,
            "base.regressor": 10,
            "metrics.metric": 7,
            "collections.defaultdict": 1,
            "stats.bivariate": 1,
            "callable": 4,
            "'base.regressionmetric'": 1,
            "base.metric": 1,
            "typing.set": 8,
            "base.optimizer": 1,
            "pd.dataframe": 5,
            "base.recommender": 2,
            "attribute(\n    value=name(\n        value='base',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n).stream": 3,
            "'sklearn.utils.bunch'": 1,
            "typing.iterator": 1,
            "'forecaster'": 1,
            "proba.multinomial": 4,
            "np.ndarray": 10,
            "bin": 2,
            "attribute(\n    value=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='list',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [base]": 1,
            "set": 9,
            "efdtsplitnode": 3,
            "activeleaf": 6,
            "inactiveleaf": 6,
            "learningnode": 5,
            "driftdetector": 12,
            "np.random": 5,
            "deque": 2,
            "type [nodetype]": 2,
            "foundnode": 1,
            "union [dict,var]": 3,
            "dict [int,node]": 2,
            "arfhoeffdingtreeregressor": 1,
            "arfhoeffdingtreeclassifier": 1,
            "pd.series": 2,
            "typing.list": 3,
            "\"attributeobserver\"": 1,
            "attributesplitsuggestion": 1,
            "typing.iterable": 1,
            "\"anomalydetector\"": 1,
            "arm": 3,
            "any": 2,
            "list [base]": 2,
            "banditsolver": 1,
            "metrics.regressionmetric": 2,
            "iterator [estimator]": 1,
            "metric": 1,
            "list [regressor]": 1,
            "regressionmetric": 1,
            "optional [union [str,list [str]]]": 2,
            "dict [str,union [int,tuple [int]]]": 1,
            "union [int,tuple [int]]": 1,
            "bandit": 2,
            "banditpolicy": 1,
            "iterator [arm]": 2
        },
        "RQ2_5": "What types are the top 10 changed ?",
        "total_changed": 97,
        "typeChanged_dict_var": {},
        "typeChanged_dict_arg": {
            "str -> types.label": 1,
            "bool -> float": 1,
            "types.label -> float": 1,
            "float -> bool": 1,
            "'regressionmetric' -> 'base.regressionmetric'": 1,
            "bool -> typing.hashable": 1,
            "typing.hashable -> bool": 1,
            "base.binaryclassifier -> base.classifier": 1,
            "list -> dict": 1,
            "hoeffdingtree.splitnode -> splitnode": 2,
            "regressionhoeffdingtree -> activelearningnode": 2,
            "regressionhoeffdingtree -> splitnode": 2,
            "hoeffdingtree.activelearningnode -> activelearningnode": 1,
            "arfhoeffdingtree -> arfhoeffdingtreeclassifier": 1,
            "hoeffdingtreeregressor -> arfhoeffdingtreeregressor": 1,
            "anytimesplitnode -> efdtsplitnode": 2,
            "activelearningnode -> activeleaf": 2,
            "inactivelearningnode -> inactiveleaf": 2,
            "basedriftdetector -> driftdetector": 12,
            "float -> dict": 1,
            "type [nt] -> type [nodetype]": 3,
            "learningnode -> node": 1,
            "activeleaf -> learningnode": 2,
            "union [dict,stats] -> union [dict,var]": 1,
            "type [nodetype] -> 'node'": 1,
            "str -> list [str]": 2,
            "'base.regressionmetric' -> \"base.regressionmetric\"": 1,
            "'sklearn.utils.bunch' -> \"sklearn.utils.bunch\"": 1,
            "'node' -> \"node\"": 1,
            "confusionmatrix -> 'metrics.confusionmatrix'": 3,
            "multilabelconfusionmatrix -> 'metrics.multilabelconfusionmatrix'": 1,
            "'metrics.confusionmatrix' -> \"metrics.confusionmatrix\"": 3,
            "'metrics.multilabelconfusionmatrix' -> \"metrics.multilabelconfusionmatrix\"": 1,
            "efdtsplitnode -> baseefdtbranch": 1,
            "splitnode -> htbranch": 2,
            "htbranch -> dtbranch": 2
        },
        "typeChanged_dict_ret": {
            "dict -> float": 1,
            "dict -> int": 1,
            "str -> types.label": 1,
            "float -> dict": 1,
            "dict -> bool": 1,
            "types.label -> dict": 1,
            "dict -> 'transformer'": 1,
            "int -> 'clusterer'": 1,
            "list -> 'forecaster'": 1,
            "'binaryclassifier' -> 'classifier'": 1,
            "attribute(\n    value=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='dict',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [bool,float] -> attribute(\n    value=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='dict',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [typing,float]": 1,
            "bool -> attribute(\n    value=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='union',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [typing,none]": 1,
            "'multiclassifier' -> 'binaryclassifier'": 1,
            "attribute(\n    value=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='dict',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [typing,float] -> attribute(\n    value=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='dict',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [bool,float]": 1,
            "attribute(\n    value=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='union',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [typing,none] -> bool": 1,
            "attribute(\n    value=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='dict',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [typing,float] -> attribute(\n    value=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='union',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [typing,none]": 1,
            "bool -> foundnode": 1,
            "node -> union [node,none]": 1,
            "foundnode -> bool": 1,
            "dict -> union [dict,var]": 1,
            "dict -> iterator ['node']": 1,
            "'anomalydetector' -> \"anomalydetector\"": 1,
            "'clusterer' -> \"clusterer\"": 1,
            "'classifier' -> \"classifier\"": 1,
            "'forecaster' -> \"forecaster\"": 1,
            "'attributeobserver' -> \"attributeobserver\"": 1,
            "iterator ['node'] -> iterator [\"node\"]": 1,
            "int -> float": 1,
            "pd.dataframe -> pd.sparsedataframe": 1,
            "pd.sparsedataframe -> pd.dataframe": 1,
            "iterable [union [\"branch\",\"leaf\"]] -> tuple [int,union [\"leaf\",\"branch\"]]": 1,
            "\"leaf\" -> iterable [union [\"branch\",\"leaf\"]]": 1,
            "attribute(\n    value=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='type',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [htbranch] -> attribute(\n    value=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='type',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [dtbranch]": 1,
            "dict -> str": 1
        },
        "s3": "------------------------------------------------------------------------",
        "RQ3_1": "Where are types added (function args, function returns, variables)?",
        "functionArgsType_added": 1209,
        "functionReturnsType_added": 259,
        "variableType_added": 40,
        "RQ3_2": "Where are types removed (function args, function returns, variables)?",
        "functionArgsType_removed": 705,
        "functionReturnsType_removed": 112,
        "variableType_removed": 29,
        "RQ3_3": "Where are types changed (function args, function returns, variables?",
        "functionArgsType_changed": 63,
        "functionReturnsType_changed": 34,
        "variableType_changed": 0,
        "s4": "------------------------------------------------------------------------",
        "RQ4_1": "Are types added along with other changes around this code or in commits that only add types?",
        "typeAnnotation_added_per_commit": 0,
        "list_typeAnnotation_added_per_commit": [],
        "RQ4_2": "Are types removed along with other changes around this code or in commits that only add types?",
        "typeAnnotation_removed_per_commit": 0,
        "list_typeAnnotation_removed_per_commit": [],
        "RQ4_3": "Are types changed along with other changes around this code or in commits that only add types?",
        "typeAnnotation_changed_per_commit": 0,
        "list_typeAnnotation_changed_per_commit": [
            0.411522633744856,
            0.6430868167202572,
            0.2857142857142857,
            0.09541984732824427,
            1.0869565217391304,
            0.10683760683760685,
            0.19342359767891684,
            0.47393364928909953,
            0.25380710659898476,
            1.282051282051282,
            0.554016620498615,
            1.2779552715654952,
            0.81799591002045,
            0.7518796992481203,
            0.5709624796084829,
            0.21253985122210414,
            0.2761159687068569,
            4.9504950495049505,
            0.18315018315018314,
            1.1673151750972763,
            1.1111111111111112,
            1.3071895424836601,
            9.433962264150944,
            1.9607843137254901,
            0.2898550724637681,
            0.2915451895043732,
            0.927643784786642,
            50.0,
            50.0,
            0.3076923076923077,
            2.0408163265306123,
            0.3731343283582089,
            0.60790273556231,
            0.6134969325153374,
            0.5602240896358543,
            0.5617977528089888,
            0.5952380952380952,
            3.9603960396039604,
            0.05186721991701245,
            0.199203187250996,
            2.094240837696335,
            25.0,
            0.2526847757422615,
            1.8181818181818181,
            1.5625,
            2.5449101796407185,
            5.88235294117647,
            1.1342155009451798,
            10.0,
            100.0,
            4.3478260869565215,
            0.4140786749482402,
            0.41623309053069724,
            0.2824858757062147,
            0.3780718336483932,
            0.16357688113413305,
            0.12150668286755771,
            0.4975124378109453,
            1.468189233278956,
            10.0,
            100.0,
            0.4608294930875576,
            5.857740585774058,
            2.7777777777777777,
            1.257861635220126,
            2.7777777777777777,
            0.026399155227032733,
            0.32938076416337286,
            0.7936507936507936,
            0.49019607843137253,
            0.7874015748031495,
            1.4925373134328357,
            0.4291845493562232,
            2.0202020202020203,
            2.7027027027027026,
            2.0408163265306123,
            0.22603978300180833,
            0.10598834128245893,
            0.024390243902439025,
            0.27100271002710025,
            0.3144654088050315,
            2.314814814814815,
            4.761904761904762,
            0.0006329612458927848,
            0.0006329665878037185,
            0.5934718100890208,
            1.8867924528301887,
            0.5934718100890208,
            0.13175230566534915,
            0.2617801047120419,
            0.2288329519450801,
            1.0416666666666665,
            0.3952569169960474,
            0.0008435893884890821,
            0.0008435852372583479,
            0.5056890012642226,
            0.6349206349206349,
            0.4987531172069825,
            0.4987531172069825,
            0.4987531172069825,
            0.16750418760469013,
            0.16750418760469013,
            0.22598870056497175,
            1.384083044982699,
            5.0,
            5.0,
            2.2222222222222223,
            4.545454545454546,
            0.4048582995951417,
            0.06917679612609941,
            0.28751123090745734,
            0.2801120448179272,
            0.00946611132146914,
            0.7194244604316548,
            1.3513513513513513,
            0.2915451895043732,
            0.21299254526091588,
            1.071080817916261,
            0.9708737864077669,
            13.698630136986301,
            4.0,
            4.444444444444445,
            0.5847953216374269,
            0.8771929824561403,
            2.729528535980149,
            0.4016064257028112,
            0.25157232704402516,
            0.6265664160401002,
            0.019630938358853555,
            0.030773965225419295,
            0.05172859729287008,
            3.9867109634551494,
            25.0,
            1.0452961672473868,
            0.3125,
            0.15698587127158556,
            0.15698587127158556,
            3.7037037037037033,
            1.4705882352941175,
            0.2345798261349524,
            3.225806451612903,
            2.857142857142857,
            5.88235294117647,
            0.1105379513633014,
            0.1195219123505976,
            0.708215297450425,
            0.6993006993006993,
            0.9732360097323601,
            0.4667444574095682,
            0.9638554216867471,
            0.4914004914004914,
            0.04856726566294317,
            0.38461538461538464,
            0.35335689045936397,
            0.9828009828009828,
            0.9828009828009828,
            0.12254901960784313,
            0.12296341838303104,
            1.6666666666666667,
            11.538461538461538,
            2.857142857142857,
            2.380952380952381,
            2.18978102189781,
            0.8620689655172413,
            2.857142857142857,
            9.090909090909092,
            2.666666666666667,
            1.1976047904191618,
            1.2738853503184715,
            1.0752688172043012,
            4.615384615384616,
            0.625,
            0.6866952789699571,
            0.4034013408015788,
            0.4034598862185069,
            6.0606060606060606,
            2.035623409669211,
            2.0,
            2.0460358056265986,
            5.263157894736842,
            0.9852216748768473,
            0.9615384615384616,
            1.1627906976744187,
            2.095808383233533,
            1.0638297872340425,
            3.5294117647058822,
            0.17358958462492252,
            0.17358958462492252,
            1.8494055482166447,
            0.6067961165048543,
            32.25806451612903,
            2.380952380952381,
            2.380952380952381,
            0.18281535648994515,
            0.18281535648994515,
            2.8205128205128207,
            2.827763496143959,
            2.564102564102564,
            11.11111111111111,
            7.734806629834254,
            0.684931506849315,
            3.1746031746031744,
            76.92307692307693,
            3.625377643504532,
            0.576923076923077,
            18.181818181818183,
            28.57142857142857,
            2.6378896882494005,
            3.9473684210526314,
            9.473684210526317,
            5.314009661835748,
            0.3508771929824561,
            16.666666666666664,
            19.51219512195122,
            7.216494845360824,
            0.5025125628140703,
            2.247191011235955,
            0.5405405405405406,
            1.36986301369863,
            0.4048582995951417,
            15.254237288135593,
            4.0,
            6.0,
            0.5555555555555556,
            3.2983508245877062,
            0.21097046413502107,
            0.5952380952380952,
            0.18796992481203006,
            8.51063829787234,
            4.9504950495049505,
            1.5384615384615385,
            0.7380073800738007,
            3.5980991174473864,
            2.5295109612141653,
            2.2222222222222223,
            0.25806451612903225,
            2.484472049689441,
            7.4074074074074066,
            4.918032786885246,
            5.217391304347826,
            0.591715976331361,
            0.46511627906976744,
            12.5,
            0.005336748852598996,
            0.03291639236339697,
            0.04698144233027954,
            0.08702378650164379,
            0.1404494382022472,
            0.04995004995004995,
            6.382978723404255,
            11.11111111111111,
            0.13175230566534915,
            0.13404825737265416,
            1.7094017094017095,
            5.0,
            0.7246376811594203,
            0.0778816199376947,
            0.2178649237472767,
            0.25773195876288657,
            0.08650519031141869,
            1.762114537444934,
            0.6944444444444444,
            0.8064516129032258,
            1.0638297872340425,
            1.8181818181818181,
            1.0869565217391304,
            3.225806451612903,
            0.8771929824561403,
            3.896103896103896,
            6.976744186046512,
            13.333333333333334,
            2.0408163265306123,
            2.2535211267605635,
            0.7194244604316548,
            2.9787234042553195,
            1.1235955056179776,
            0.3076923076923077,
            0.1342281879194631,
            1.5789473684210527,
            16.666666666666664,
            12.5,
            5.555555555555555,
            1.1764705882352942,
            2.3255813953488373,
            1.0101010101010102,
            0.04805382027871216,
            0.07468259895444362,
            1.4035087719298245,
            6.896551724137931,
            0.4464285714285714,
            2.460850111856823,
            0.5115089514066496,
            0.87527352297593,
            0.33444816053511706,
            1.9230769230769231,
            3.8461538461538463,
            1.1990407673860912,
            0.29997272975184075,
            0.598404255319149,
            0.9708737864077669,
            1.2396694214876034,
            0.4807692307692308,
            1.1904761904761905,
            2.0202020202020203,
            5.555555555555555,
            4.0,
            1.38755980861244,
            0.3787878787878788,
            0.05946010227137591,
            0.1366120218579235,
            0.11135857461024498,
            1.2987012987012987,
            1.0,
            0.2145922746781116,
            1.0526315789473684,
            0.19243104554201412,
            1.4285714285714286,
            0.9478672985781991,
            1.7793594306049825,
            1.1111111111111112,
            1.446808510638298,
            0.14064697609001406,
            1.0936757013789824,
            0.36330608537693004,
            0.7407407407407408,
            0.5500550055005501,
            0.48192771084337355,
            1.6681299385425814,
            1.7964071856287425,
            0.008662508662508662,
            3.0927835051546393,
            0.3389830508474576,
            4.761904761904762,
            1.8018018018018018,
            1.1371237458193981,
            1.705237515225335
        ],
        "annotation_related_insertion_edits_vs_all_commit": [],
        "annotation_related_deletion_edits_vs_all_commit": [],
        "s5": "------------------------------------------------------------------------",
        "RQ5": "Relation of properties of projects vs. properties of type changes.",
        "matrix_commits_stars_annotations": [
            [
                "2019",
                "3230",
                "962",
                "2451",
                "120",
                "35",
                "2204",
                "11555",
                "80",
                "0",
                "0",
                "67420"
            ]
        ],
        "matrix_files_annotations": [],
        "matrix_test_files_annotations": [],
        "dict_funct_call_no_types": {},
        "dict_funct_call_types": {},
        "s6": "------------------------------------------------------------------------",
        "RQ6": "Which are the top 10 repository with the highest number of type annotations.",
        "number_type_annotations_per_repo": {
            "https://github.com/creme-ml/creme": 2451
        },
        "s7": "------------------------------------------------------------------------",
        "RQ7": "How many of all types are annotated in the last version of the code?",
        "typeLastProjectVersion_total": 1299,
        "typeLastProjectVersion_average": 0,
        "typeLastProjectVersion_percentage": [
            86.14
        ],
        "typeLastProjectVersion_dict": {
            "https://github.com/creme-ml/creme": 1299
        },
        "typeLastProjectVersion_dict_error": {},
        "RQ8": "Total number of annotations over time, across all projects",
        "typeAnnotation_year_analysis": {
            "2019": 109,
            "2020": 1012,
            "2017": 11,
            "2018": 79,
            "2021": 297
        },
        "RQ9": "Total number of annotation-related commit over time, across all projects",
        "typeAnnotation_commit_annotation_year_analysis": {
            "2019": 26,
            "2020": 127,
            "2017": 2,
            "2018": 14,
            "2021": 34
        },
        "typeAnnotation_commit_not_annotation_year_analysis": {
            "2019": 1085,
            "2020": 936,
            "2017": 45,
            "2018": 481,
            "2021": 265
        },
        "RQ10": "Type annotation coverage for each each",
        "annotation_coverage": {
            "2014": [
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "2015": [
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "2016": [
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "2017": [
                48,
                6852,
                0,
                3454,
                0,
                5581
            ],
            "2018": [
                74,
                7756,
                0,
                3467,
                0,
                7011
            ],
            "2019": [
                257,
                10634,
                107,
                4725,
                0,
                9324
            ],
            "2020": [
                3426,
                32777,
                589,
                14869,
                96,
                34520
            ]
        },
        "RQ11": "Developers statistics",
        "list_dev_dict": [
            {
                "creme-ml-creme": 0,
                "maxhalford25@gmail.com": 79,
                "flegac@users.noreply.github.com": 1,
                "geoffrey.bolmier@gmail.com": 2,
                "jacob.montiel@gmail.com": 10,
                "bader.d24@gmail.com": 5,
                "aminekrifi1994@gmail.com": 1,
                "saulomastelini@gmail.com": 43,
                "gwalid94@gmail.com": 2,
                "mastelini@usp.br": 9,
                "albandecrevoisier@gmail.com": 1,
                "17923265+jacobmontiel@users.noreply.github.com": 28,
                "raphael.sourty@gmail.com": 10,
                "etienne.kintzler@gmail.com": 5,
                "50743576+hoanganhngo610@users.noreply.github.com": 4,
                "michaelchiucw@gmail.com": 1,
                "masatonaka1989@gmail.com": 1,
                "42866082+kulbachcedric@users.noreply.github.com": 1
            }
        ],
        "list_dev_dict_total": [
            {
                "creme-ml-creme": 0,
                "maxhalford25@gmail.com": 1315,
                "adilzouitinegm@gmail.com": 80,
                "raphael.sourty@gmail.com": 118,
                "robinvaysse@hotmail.fr": 28,
                "geoffrey.bolmier@gmail.com": 120,
                "vincentwarmerdam@gmail.com": 2,
                "allcontributors[bot]@users.noreply.github.com": 2,
                "l.bowenwest@googlemail.com": 5,
                "flegac@users.noreply.github.com": 2,
                "danielheres@gmail.com": 1,
                "32324822+VaysseRobin@users.noreply.github.com": 6,
                "jovan.veljanoski@gmail.com": 2,
                "home@MacBook-Pro-de-Raphael.local": 1,
                "=": 18,
                "49699333+dependabot[bot]@users.noreply.github.com": 3,
                "dimitri.781@gmail.com": 3,
                "gsharma81999@gmail.com": 14,
                "greatsharma04@gmail.com": 8,
                "cclauss@me.com": 1,
                "ferdinand.mom@epita.fr": 10,
                "bruno@charron.email": 15,
                "jacob.montiel@gmail.com": 581,
                "jesse.read@gmail.com": 20,
                "guilhermekmatsumoto@gmail.com": 47,
                "abifet@users.noreply.github.com": 3,
                "yupbank@users.noreply.github.com": 2,
                "alessandrolongobardi89@gmail.com": 4,
                "peng.yu@shopify.com": 2,
                "bader.d24@gmail.com": 50,
                "39341193+krifiMedAmine@users.noreply.github.com": 2,
                "aminekrifi1994@gmail.com": 47,
                "15931380+lckr@users.noreply.github.com": 1,
                "fleckenstein.lukas@gmail.com": 4,
                "saulomastelini@gmail.com": 272,
                "40759448+MelchiorChui@users.noreply.github.com": 1,
                "p.gijsbers@tue.nl": 29,
                "gilberto.olimpio@gmail.com": 9,
                "mastelini@usp.br": 39,
                "aquancva@gmail.com": 4,
                "gwalid94@gmail.com": 39,
                "b.gulowaty@gmail.com": 1,
                "andrecruz97@gmail.com": 22,
                "minh-huong.le-nguyen@polytechnique.edu": 2,
                "dammak.bader@gmail.com": 10,
                "ebadi.payam@gmail.com": 1,
                "39265293+Payam-Ebadi@users.noreply.github.com": 2,
                "moritz.heusinger@gmail.com": 11,
                "ducanhtt@gmail.com": 1,
                "mertozer94@gmail.com": 6,
                "lucca54@gmail.com": 1,
                "oceaniatt@hotmail.com": 1,
                "632239375@qq.com": 1,
                "albandecrevoisier@gmail.com": 8,
                "fiona-wille@hotmail.de": 1,
                "auffarth@gmail.com": 1,
                "imransalim08@gmail.com": 2,
                "jmrozanec@gmail.com": 1,
                "17923265+jacobmontiel@users.noreply.github.com": 161,
                "christophraab@outlook.de": 1,
                "fabricioceschin@gmail.com": 1,
                "20029252+garawalid@users.noreply.github.com": 2,
                "mihirthakkar98@gmail.com": 2,
                "ashishsinha108@gmail.com": 4,
                "github-actions@github.com": 2,
                "styren@kth.se": 6,
                "etienne.kintzler@gmail.com": 30,
                "charles@doffy.net": 1,
                "50743576+hoanganhngo610@users.noreply.github.com": 8,
                "fede.develop@gmail.com": 1,
                "54956904+ColdTeapot273K@users.noreply.github.com": 13,
                "anton.j.15.le@gmail.com": 1,
                "pomelo.wu@gmail.com": 1,
                "michaelchiucw@gmail.com": 1,
                "joshua.gornall@manchester.ac.uk": 1,
                "237372@student.pwr.edu.pl": 1,
                "42866082+kulbachcedric@users.noreply.github.com": 4,
                "12769364+tnwei@users.noreply.github.com": 1,
                "masatonaka1989@gmail.com": 5,
                "90677781+fox-ds@users.noreply.github.com": 1
            }
        ],
        "dev_dict": {},
        "dev_dict_total": {},
        "list_dev_plot": []
    }
]