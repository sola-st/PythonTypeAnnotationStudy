[
    {
        "execution_time": "",
        "machine": {
            "OS": "Linux-4.15.0-166-generic-x86_64-with-Ubuntu-18.04-bionic",
            "CPU": "x86_64",
            "CORES": 48
        },
        "total_repositories": 1,
        "total_commits": 778,
        "commit_year_dict": {
            "2017": 228,
            "2018": 215,
            "2019": 172,
            "2020": 114,
            "2021": 49
        },
        "loc_year_edit": {
            "2017": 47686,
            "2018": 45790,
            "2019": 43752,
            "2020": 10445,
            "2021": 24355
        },
        "s0": "------------------------------------------------------------------------",
        "RQ0": "How many types are used?",
        "code_changes": [],
        "commit_statistics": [],
        "repo_with_types_changes": 1,
        "percentage_repo_with_typeChanges": "",
        "commits_with_typeChanges": 131,
        "percentage_commits_with_typeChanges": "",
        "total_typeAnnotation_codeChanges": 2998,
        "s1": "------------------------------------------------------------------------",
        "RQ1": "Are type annotation inserted, removed and changed?",
        "insert_types": {
            "2017": 558,
            "2018": 549,
            "2019": 212,
            "2020": 53,
            "2021": 741
        },
        "percentage_insert_types": "",
        "remove_types": {
            "2017": 64,
            "2018": 227,
            "2019": 369,
            "2020": 10,
            "2021": 70
        },
        "percentage_remove_types": "",
        "modify_existing_types": {
            "2017": 44,
            "2018": 46,
            "2019": 18,
            "2020": 6,
            "2021": 31
        },
        "percentage_modify_existing_types": "",
        "s2": "------------------------------------------------------------------------",
        "RQ2_1": "What types are added (generic, numeric, ...)?",
        "anyType_added": 0,
        "noneType_added": 0,
        "numericType_added": 0,
        "binarySequenceType_added": 0,
        "textSequenceType_added": 0,
        "mappingTypes_added": 0,
        "setTypes_added": 0,
        "sequenceType_added": 0,
        "newType_added": 0,
        "total_added": 2113,
        "RQ2_2": "What are the top 5 types added?",
        "typeAdded_dict": {
            "int": 352,
            "callable": 14,
            "iterable [str]": 32,
            "str": 406,
            "dict [str,mx]": 2,
            "iterable [tuple [float,int]]": 1,
            "list [int]": 19,
            "dict [str,int]": 12,
            "bool": 192,
            "list [tuple [int,int]]": 16,
            "optional [int]": 33,
            "'parallelbucketsentenceiter'": 1,
            "list [list [int]]": 5,
            "optional [str]": 30,
            "iterator [list [str]]": 3,
            "iterator [str]": 3,
            "attribute(\n    value=name(\n        value='mx',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='io',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n).databatch": 4,
            "logging.logger": 2,
            "float": 112,
            "none": 70,
            "optional [learningratescheduler]": 1,
            "modelconfig": 2,
            "dict": 14,
            "mapping": 3,
            "np.array": 4,
            "tuple [int,int]": 7,
            "optional [tuple [int,tuple [int,int]]]": 2,
            "optional [mx]": 7,
            "'config'": 1,
            "encoder.recurrentencoderconfig": 1,
            "decoder.recurrentdecoderconfig": 1,
            "attention.attentionconfig": 1,
            "loss.lossconfig": 1,
            "rnnconfig": 1,
            "attribute(\n    value=name(\n        value='mx',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='rnn',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n).sequentialrnncell": 1,
            "data_io.dataconfig": 3,
            "tuple [float,float]": 4,
            "list [str]": 59,
            "list [tuple [float,int]]": 2,
            "optional [list [tuple [float,int]]]": 1,
            "optional [float]": 12,
            "list [list [any]]": 2,
            "tuple ['parallelbucketsentenceiter','parallelbucketsentenceiter','dataconfig']": 1,
            "optional [list [tuple [int,int]]]": 1,
            "argparse.namespace": 54,
            "tuple [bool,str]": 1,
            "exitstack": 3,
            "optional [encoder]": 1,
            "model.modelconfig": 4,
            "list [mx]": 10,
            "data_io.parallelbucketsentenceiter": 1,
            "lr_scheduler.learningratescheduler": 2,
            "tuple [dict,dict]": 2,
            "tuple ['data_io.parallelbucketsentenceiter','data_io.parallelbucketsentenceiter','data_io.dataconfig']": 1,
            "config": 4,
            "training.trainingmodel": 1,
            "tuple [str,dict]": 1,
            "inference.translatorinput": 6,
            "inference.translatoroutput": 6,
            "bleu": 6,
            "tuple [mx,mx,mx]": 1,
            "counter": 9,
            "dict [str,np]": 2,
            "list [optional [float]]": 3,
            "iterable [list [any]]": 2,
            "iterable [list [int]]": 2,
            "vocab.vocab": 15,
            "rawparalleldatasetloader": 2,
            "list [bucketbatchsize]": 5,
            "'lengthstatistics'": 2,
            "tuple [list [tuple [str,str,'datastatistics']],'datastatistics']": 1,
            "'paralleldataset'": 4,
            "'datastatistics'": 1,
            "'parallelsampleiter'": 1,
            "tuple ['baseparallelsampleiter','baseparallelsampleiter','dataconfig',vocab,vocab]": 1,
            "optional [list [bucketbatchsize]]": 1,
            "datastatistics": 2,
            "iterable [int]": 2,
            "paralleldataset": 2,
            "tuple [list [mx],list [mx]]": 1,
            "tuple ['data_io.baseparallelsampleiter','data_io.baseparallelsampleiter','data_io.dataconfig',dict,dict]": 1,
            "inversevocab": 1,
            "vocab": 8,
            "optional [list [optional [int]]]": 2,
            "tuple [str,dict,str,str,float]": 1,
            "list [float]": 9,
            "sequence [iterable [list [any]]]": 2,
            "list [vocab]": 23,
            "list [sized]": 1,
            "list [optional [str]]": 5,
            "sequence [iterable [list [int]]]": 1,
            "optional [list [str]]": 9,
            "sequence [iterable [any]]": 1,
            "iterable [any]": 1,
            "sequence [iterable]": 2,
            "iterable": 2,
            "sequence [iterable [optional [any]]]": 2,
            "iterable [optional [any]]": 1,
            "optional [vocab]": 1,
            "tuple [list [sequencereader],sequencereader]": 1,
            "task": 2,
            "list [tuple [str,str,str]]": 2,
            "iterable [bytes]": 2,
            "io.bytesio": 2,
            "mx.context": 2,
            "inference_image.imagecaptioner": 1,
            "tuple": 11,
            "dict [str,float]": 2,
            "attribute(\n    value=name(\n        value='mx',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='mod',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n).module": 1,
            "list [encoder]": 1,
            "optional [checkpoint_decoder]": 1,
            "tuple ['data_io.baseparallelsampleiter','data_io.baseparallelsampleiter','data_io.dataconfig',dict]": 1,
            "tuple [config,int]": 1,
            "list [tuple [str,mx]]": 2,
            "image": 1,
            "optional [tuple]": 2,
            "list [np]": 3,
            "np.ndarray": 8,
            "list": 9,
            "optional [list [tuple [str,mx]]]": 1,
            "tuple [float,float,float,float]": 1,
            "list [tuple [str,callable]]": 1,
            "dict [str,list [float]]": 1,
            "rerankoutput": 2,
            "dict [int,str]": 1,
            "set [int]": 3,
            "tuple ['data_io.baseparallelsampleiter','data_io.dataconfig',list [vocab],vocab,model]": 1,
            "training.trainstate": 1,
            "dict [str,any]": 17,
            "tuple [list [str],list [float]]": 2,
            "sequence [sized]": 1,
            "'baseparallelsampleiter'": 1,
            "sequence [iterator [optional [any]]]": 1,
            "iterator [optional [any]]": 1,
            "list [dict [str,any]]": 2,
            "list [tuple [optional [float],optional [float]]]": 2,
            "optional [loss]": 1,
            "layers.lengthratioconfig": 1,
            "'batch'": 1,
            "iterable [tuple [any]]": 1,
            "union [mx,list [mx]]": 1,
            "data_io.batch": 2,
            "union [list [mx],mx]": 2,
            "optional [list [int]]": 1,
            "tuple [sockeyemodel,list [vocab],vocab]": 1,
            "tuple [list [sockeyemodel],list [vocab],vocab]": 1,
            "batchscorer": 2,
            "'lossmetric'": 6,
            "tuple ['data_io.baseparallelsampleiter',list [vocab],vocab,model]": 1,
            "scoringmodel": 1,
            "outputhandler": 4,
            "candidatescorer": 9,
            "inference.lengthpenalty": 1,
            "inference.brevitypenalty": 1,
            "list [bool]": 3,
            "optional [callable]": 4,
            "optional [list [factorconfig]]": 2,
            "any": 1,
            "optional [config]": 1,
            "iterator [dict [str,str]]": 2,
            "tuple [int,float]": 2,
            "iterable [union [sequence [str],str]]": 1,
            "iterable [iterable [str]]": 2,
            "tuple [str,...]": 2,
            "list [tuple [str,...]]": 2,
            "pt.tensor": 88,
            "optional [pt]": 28,
            "pytorchsockeyemodel": 2,
            "list [pytorchsockeyemodel]": 4,
            "optional [lexicon]": 5,
            "pt.dtype": 2,
            "pt.device": 5,
            "_singlemodelinference": 1,
            "_inference": 1,
            "tuple [pt,int]": 1,
            "tuple [pt,pt,pt,pt,list [optional [pt]]]": 2,
            "union [beamsearch,greedysearch]": 1,
            "model_pt.pytorchsockeyemodel": 2,
            "torch.device": 2,
            "list [any]": 1,
            "decoderconfig": 2,
            "type [decoderconfig]": 1,
            "list [pt]": 5,
            "transformerconfig": 3,
            "'transformerdecoder'": 1,
            "'pytorchdecoder'": 2,
            "tuple [pt,list [pt]]": 1,
            "transformer_pt.transformerconfig": 3,
            "embeddingconfig": 1,
            "'embedding'": 1,
            "'transformerencoder'": 1,
            "tuple [pt,pt]": 11,
            "sentenceid": 9,
            "tokens": 3,
            "optional [list [tokens]]": 5,
            "optional [dict]": 1,
            "'translator'": 3,
            "optional [dict [str,any]]": 1,
            "optional [list [float]]": 2,
            "optional [list [list [str]]]": 1,
            "optional [list [list [tokens]]]": 1,
            "list [tokenids]": 1,
            "tokenids": 1,
            "optional [nbesttranslations]": 1,
            "translatorinput": 7,
            "translation": 8,
            "list [translation]": 6,
            "optional [union [lexicon,dict [str,lexicon]]]": 1,
            "list [translatorinput]": 2,
            "onp.ndarray": 8,
            "tuple [int,callable]": 2,
            "generator ['translatorinput',none,none]": 1,
            "'translatorinput'": 1,
            "badtranslatorinput": 1,
            "list [translatoroutput]": 1,
            "tuple [pt,int,optional [lexicon],pt]": 1,
            "tuple [list [str],str,list [list [str]],list [str]]": 1,
            "translatoroutput": 1,
            "'lhuc'": 1,
            "'outputlayer'": 1,
            "'lengthratio'": 1,
            "'multiheadselfattention'": 1,
            "'multiheadattention'": 1,
            "'positionalembeddings'": 1,
            "'ssru'": 1,
            "attribute(\n    value=name(\n        value='pt',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='nn',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n).module": 1,
            "tuple [np,np]": 1,
            "data_io_pt.batch": 3,
            "data_io_pt.baseparallelsampleiter": 1,
            "data_io_pt.dataconfig": 1,
            "model_pt.modelconfig": 3,
            "dict [str,torch]": 2,
            "optional [checkpoint_decoder_pt]": 1,
            "tuple ['data_io_pt.baseparallelsampleiter','data_io_pt.baseparallelsampleiter','data_io_pt.dataconfig',list [vocab],list [vocab]]": 1,
            "tuple [transformer_pt,int]": 1,
            "list [loss_pt]": 1,
            "optimizers.pytorchoptimizerconfig": 1,
            "training_pt.trainstate": 1,
            "'transformerencoderblock'": 1,
            "'transformerdecoderblock'": 1,
            "'transformerprocessblock'": 1,
            "'transformerfeedforward'": 1,
            "inference_pt.translator": 3,
            "list [inference_pt]": 1,
            "generator [inference_pt,none,none]": 1,
            "tuple [list [torch],list [torch]]": 1,
            "searchresult": 1,
            "optional [list [tuple [pt,pt]]]": 1
        },
        "RQ2_3": "What types are removed (generic, numeric, ...)?",
        "anyType_removed": 0,
        "noneType_removed": 0,
        "numericType_removed": 0,
        "binarySequenceType_removed": 0,
        "textSequenceType_removed": 0,
        "mappingTypes_removed": 0,
        "setTypes_removed": 0,
        "sequenceType_removed": 0,
        "newType_removed": 0,
        "total_removed": 740,
        "RQ2_4": "What are the top 5 types removed?",
        "typeRemoved_dict": {
            "int": 104,
            "str": 240,
            "bool": 77,
            "float": 37,
            "list [tuple [float,int]]": 3,
            "attention.attentionconfig": 1,
            "dict [str,int]": 7,
            "tuple [float,float]": 4,
            "list [anystr]": 2,
            "optional [mx]": 1,
            "optional [int]": 6,
            "iterable [list [int]]": 4,
            "list [tuple [int,int]]": 1,
            "np.array": 4,
            "optional [str]": 19,
            "list [str]": 32,
            "dict": 3,
            "iterable [str]": 14,
            "counter": 7,
            "iterable [list [any]]": 4,
            "vocab.vocab": 9,
            "argparse.namespace": 17,
            "mapping": 1,
            "tuple [encoder,int]": 1,
            "model.modelconfig": 2,
            "lr_scheduler.learningratescheduler": 1,
            "sequence [iterable [list [any]]]": 2,
            "sequence [iterable [list [int]]]": 1,
            "optional [vocab]": 1,
            "optional [list [str]]": 5,
            "exitstack": 2,
            "optional [checkpoint_decoder]": 2,
            "task": 2,
            "list [tuple [str,str,str]]": 2,
            "iterable [bytes]": 2,
            "io.bytesio": 2,
            "list [int]": 4,
            "list [float]": 6,
            "bleu": 6,
            "logging.logger": 1,
            "sequence [iterable [optional [any]]]": 1,
            "list [mx]": 3,
            "loss.lossconfig": 1,
            "optional [loss]": 1,
            "mx.context": 2,
            "inference_image.imagecaptioner": 1,
            "tuple": 6,
            "none": 12,
            "dict [str,float]": 1,
            "tuple [mx,tuple [int]]": 1,
            "data_io.dataconfig": 1,
            "list [encoder]": 1,
            "tuple ['data_io.baseparallelsampleiter','data_io.baseparallelsampleiter','data_io.dataconfig',dict]": 1,
            "tuple [config,int]": 1,
            "list [tuple [str,mx]]": 1,
            "np.ndarray": 6,
            "image": 1,
            "optional [tuple]": 2,
            "list [np]": 5,
            "list": 1,
            "tuple [float,float,float,float]": 1,
            "tuple ['data_io.baseparallelsampleiter',list [vocab],vocab,model]": 2,
            "scoringmodel": 1,
            "list [vocab]": 1,
            "outputhandler": 1,
            "inference.translatorinput": 5,
            "inference.translatoroutput": 5,
            "callable": 1,
            "optional [list [tuple [float,int]]]": 1,
            "inference.lengthpenalty": 2,
            "inference.brevitypenalty": 2,
            "optional [float]": 2,
            "candidatescorer": 1,
            "dict [str,any]": 7,
            "list [dict [str,any]]": 1,
            "tuple [list [str],list [float]]": 1,
            "vocab": 1,
            "list [bool]": 1,
            "optional [list [factorconfig]]": 1,
            "iterable [union [sequence [str],str]]": 1,
            "transformer.transformerconfig": 1,
            "'encoder'": 1,
            "dict [str,mx]": 1,
            "dict [str,np]": 2,
            "'lossmetric'": 1,
            "data_io.batch": 2,
            "pt.tensor": 4,
            "optional [pt]": 1,
            "onp.ndarray": 1
        },
        "RQ2_5": "What types are the top 10 changed ?",
        "total_changed": 145,
        "typeChanged_dict_var": {
            "optional [list [float]] -> optional [list [list [float]]]": 1,
            "list [float] -> list [list [float]]": 1
        },
        "typeChanged_dict_arg": {
            "encoder.recurrentencoderconfig -> encoder.encoderconfig": 1,
            "encoder.encoderconfig -> config": 1,
            "decoder.recurrentdecoderconfig -> config": 1,
            "str -> optional [str]": 6,
            "optional [list [tuple [int,int]]] -> optional [list [bucketbatchsize]]": 1,
            "list [list [any]] -> iterable [list [any]]": 1,
            "list [list [int]] -> iterable [list [any]]": 1,
            "list [list [int]] -> iterable [list [int]]": 2,
            "bool -> optional [int]": 1,
            "dict [str,int] -> optional [dict [str,int]]": 2,
            "optional [list [bucketbatchsize]] -> list [bucketbatchsize]": 1,
            "optional [str] -> str": 3,
            "config -> encoder.embeddingconfig": 2,
            "data_io.parallelbucketsentenceiter -> data_io.baseparallelsampleiter": 1,
            "config -> encoder.encoderconfig": 1,
            "config -> decoder.decoderconfig": 1,
            "float -> int": 1,
            "dict [str,int] -> vocab.vocab": 1,
            "optional [dict [str,int]] -> optional [vocab]": 1,
            "mapping -> vocab": 2,
            "list [sized] -> sequence [sized]": 1,
            "int -> optional [int]": 4,
            "sequence [iterable] -> optional [sequence [iterable]]": 1,
            "list [vocab] -> optional [list [vocab]]": 1,
            "list [str] -> optional [list [str]]": 1,
            "list [str] -> dict [str,any]": 2,
            "optional [list [str]] -> list [str]": 1,
            "list [tuple [optional [float],optional [float]]] -> optional [list [tuple [optional [float],optional [float]]]]": 1,
            "float -> optional [float]": 1,
            "data_io.batchedrawparallelsampleiter -> data_io.baseparallelsampleiter": 1,
            "optional [int] -> int": 1,
            "list [str] -> union [sequence [str],str]": 1,
            "str -> iterable [str]": 1,
            "union [sequence [str],str] -> iterable [str]": 1,
            "'encoderconfig' -> transformer.transformerconfig": 1,
            "inference.translatorinput -> inference_pt.translatorinput": 8,
            "inference.translatoroutput -> inference_pt.translatoroutput": 8,
            "union [list [mx],mx] -> union [list [context],context]": 1
        },
        "typeChanged_dict_ret": {
            "iterable [tuple [float,int]] -> list [tuple [float,int]]": 1,
            "'parallelbucketsentenceiter' -> tuple [list [list [int]],list [list [int]]]": 1,
            "attribute(\n    value=name(\n        value='mx',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='rnn',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n).sequentialrnncell -> none": 1,
            "tuple ['parallelbucketsentenceiter','parallelbucketsentenceiter'] -> tuple [float,float]": 1,
            "iterable [str] -> list [str]": 1,
            "tuple [str,dict] -> tuple [str,dict,str]": 1,
            "tuple [list [list [int]],list [list [int]]] -> tuple [float,float]": 1,
            "list [list [int]] -> none": 1,
            "tuple [float,float] -> tuple [float,float,float]": 1,
            "logging.logger -> bool": 1,
            "tuple [float,float,float] -> tuple [float,float,float,float]": 1,
            "tuple [dict,dict] -> tuple [int,optional [mx]]": 1,
            "tuple [str,dict,str] -> tuple [str,dict,str,str,float]": 1,
            "tuple [float,float] -> none": 1,
            "tuple ['parallelbucketsentenceiter','parallelbucketsentenceiter','dataconfig'] -> tuple ['baseparallelsampleiter','baseparallelsampleiter','dataconfig']": 1,
            "iterator [list [str]] -> none": 2,
            "iterator [str] -> list [int]": 1,
            "none -> str": 2,
            "tuple ['data_io.parallelbucketsentenceiter','data_io.parallelbucketsentenceiter','data_io.dataconfig'] -> vocab.vocab": 1,
            "dict [str,int] -> vocab": 2,
            "dict -> vocab": 3,
            "dict -> tuple [vocab,vocab]": 1,
            "tuple [str,dict,str,str,float] -> optional [dict [str,any]]": 1,
            "tuple [config,int] -> tuple [encoder,int]": 1,
            "config -> decoder.decoderconfig": 1,
            "tuple [list [tuple [str,str,'datastatistics']],'datastatistics'] -> tuple [list [tuple [list [str],str,'datastatistics']],'datastatistics']": 1,
            "tuple ['baseparallelsampleiter','baseparallelsampleiter','dataconfig',vocab,vocab] -> tuple ['baseparallelsampleiter','baseparallelsampleiter','dataconfig',list [vocab],vocab]": 1,
            "tuple ['baseparallelsampleiter','baseparallelsampleiter','dataconfig'] -> tuple ['baseparallelsampleiter','baseparallelsampleiter','dataconfig','datainfo']": 1,
            "tuple [dict,dict] -> bool": 1,
            "tuple ['data_io.baseparallelsampleiter','data_io.baseparallelsampleiter','data_io.dataconfig',dict,dict] -> tuple ['data_io.baseparallelsampleiter','data_io.baseparallelsampleiter','data_io.dataconfig',list [vocab],vocab]": 1,
            "vocab -> list [vocab]": 2,
            "tuple [vocab,vocab] -> tuple [list [vocab],vocab]": 1,
            "tuple [bool,str] -> bool": 1,
            "tuple [int,optional [mx]] -> optional [checkpoint_decoder]": 1,
            "lr_scheduler.learningratescheduler -> tuple [encoder,int]": 1,
            "tuple [str,dict,str,str,float] -> optimizerconfig": 1,
            "optional [tuple [int,tuple [int,int]]] -> tuple [optional [int],optional [tuple [int,int]]]": 1,
            "callable -> none": 1,
            "optional [int] -> list [tuple [int,int]]": 1,
            "tuple [int,int] -> none": 1,
            "attribute(\n    value=name(\n        value='mx',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='mod',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n).module -> tuple [mx,tuple [int]]": 1,
            "list -> list [np]": 2,
            "list [mx] -> optional [checkpoint_decoder]": 1,
            "tuple ['baseparallelsampleiter','baseparallelsampleiter','dataconfig','datainfo'] -> tuple ['baseparallelsampleiter',optional ['baseparallelsampleiter'],'dataconfig','datainfo']": 1,
            "rerankoutput -> dict [str,any]": 2,
            "vocab -> bool": 1,
            "tuple [float,float,float,float] -> dict [str,any]": 1,
            "tuple ['data_io.baseparallelsampleiter','data_io.dataconfig',list [vocab],vocab,model] -> tuple ['data_io.baseparallelsampleiter',list [vocab],vocab,model]": 1,
            "attribute(\n    value=name(\n        value='mx',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='io',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n).databatch -> 'batch'": 3,
            "optional [mx] -> int": 3,
            "list [vocab] -> list [str]": 2,
            "vocab -> counter": 3,
            "none -> 'lossmetric'": 1,
            "tuple [list [str],list [float]] -> list [dict]": 1,
            "tuple [list [vocab],vocab] -> tuple [list [vocab],list [vocab]]": 1,
            "counter -> vocab": 2,
            "dict [str,mx] -> dict [str,torch]": 1,
            "attribute(\n    value=name(\n        value='mx',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='nd',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n).ndarray -> np.ndarray": 1,
            "tuple [pt,pt,pt,pt,list [optional [pt]]] -> searchresult": 2
        },
        "s3": "------------------------------------------------------------------------",
        "RQ3_1": "Where are types added (function args, function returns, variables)?",
        "functionArgsType_added": 1610,
        "functionReturnsType_added": 418,
        "variableType_added": 85,
        "RQ3_2": "Where are types removed (function args, function returns, variables)?",
        "functionArgsType_removed": 636,
        "functionReturnsType_removed": 103,
        "variableType_removed": 1,
        "RQ3_3": "Where are types changed (function args, function returns, variables?",
        "functionArgsType_changed": 67,
        "functionReturnsType_changed": 76,
        "variableType_changed": 2,
        "s4": "------------------------------------------------------------------------",
        "RQ4_1": "Are types added along with other changes around this code or in commits that only add types?",
        "typeAnnotation_added_per_commit": 0,
        "list_typeAnnotation_added_per_commit": [],
        "RQ4_2": "Are types removed along with other changes around this code or in commits that only add types?",
        "typeAnnotation_removed_per_commit": 0,
        "list_typeAnnotation_removed_per_commit": [],
        "RQ4_3": "Are types changed along with other changes around this code or in commits that only add types?",
        "typeAnnotation_changed_per_commit": 0,
        "list_typeAnnotation_changed_per_commit": [
            0.5915952672378622,
            0.9009009009009009,
            14.285714285714285,
            4.761904761904762,
            2.684563758389262,
            7.936507936507936,
            0.4694835680751174,
            4.112149532710281,
            5.263157894736842,
            4.3478260869565215,
            1.1363636363636365,
            1.342281879194631,
            0.1579778830963665,
            0.06544502617801047,
            1.639344262295082,
            12.280701754385964,
            0.5829596412556054,
            0.05189413596263622,
            2.2222222222222223,
            2.797202797202797,
            5.405405405405405,
            25.0,
            0.31124944419742107,
            0.38910505836575876,
            0.033101621979477,
            4.516129032258064,
            2.127659574468085,
            0.6993006993006993,
            1.36986301369863,
            1.4204545454545454,
            0.5263157894736842,
            0.07674597083653108,
            2.9069767441860463,
            5.084745762711865,
            5.172413793103448,
            1.2048192771084338,
            0.5671077504725899,
            0.975609756097561,
            1.9230769230769231,
            10.714285714285714,
            1.1494252873563218,
            4.545454545454546,
            0.9090909090909091,
            0.37735849056603776,
            0.4098360655737705,
            0.2127659574468085,
            3.4482758620689653,
            5.88235294117647,
            2.4271844660194173,
            1.4705882352941175,
            1.8181818181818181,
            3.048780487804878,
            0.5736137667304015,
            1.0869565217391304,
            0.24019215372297836,
            0.7092198581560284,
            11.11111111111111,
            5.263157894736842,
            1.7543859649122806,
            9.090909090909092,
            8.333333333333332,
            0.8048289738430584,
            0.8823529411764706,
            8.365019011406844,
            0.3184713375796179,
            4.3478260869565215,
            1.25,
            3.4482758620689653,
            0.8928571428571428,
            2.5316455696202533,
            0.7042253521126761,
            0.5154639175257731,
            4.545454545454546,
            5.862216516902011,
            2.6615969581749046,
            0.5408845052497614,
            2.9850746268656714,
            0.9708737864077669,
            5.161290322580645,
            9.053497942386832,
            20.0,
            1.9230769230769231,
            0.8620689655172413,
            3.476482617586912,
            4.781997187060478,
            0.5025125628140703,
            1.8181818181818181,
            0.2926829268292683,
            0.7017543859649122,
            0.18441678192715535,
            11.76470588235294,
            2.8169014084507045,
            4.819277108433735,
            1.0309278350515463,
            5.263157894736842,
            8.108108108108109,
            0.4807692307692308,
            3.8461538461538463,
            0.6756756756756757,
            1.1111111111111112,
            6.220095693779904,
            1.0101010101010102,
            0.547645125958379,
            0.4008016032064128,
            0.052994170641229466,
            1.9301470588235294,
            0.9297520661157025,
            6.593406593406594,
            2.285242290748899,
            0.08165487207403374,
            2.083333333333333,
            0.6097560975609756,
            8.88888888888889,
            2.366863905325444,
            1.1363636363636365,
            5.333333333333334,
            2.9702970297029703,
            0.5128205128205128,
            1.0752688172043012,
            22.22222222222222,
            2.0618556701030926,
            1.9801980198019802,
            3.7037037037037033,
            0.5154639175257731,
            3.4482758620689653,
            14.285714285714285,
            2.564102564102564,
            1.6129032258064515,
            1.4630288651640966,
            1.4641867827463395,
            11.76470588235294,
            2.7210884353741496,
            1.1111111111111112,
            0.3076923076923077,
            1.5105740181268883,
            2.083333333333333,
            1.0526315789473684,
            2.7210884353741496,
            1.7857142857142856,
            12.371134020618557,
            4.545454545454546,
            3.8461538461538463,
            1.8867924528301887,
            4.0,
            2.9465930018416207,
            0.17857142857142858,
            2.127659574468085,
            8.0,
            9.037900874635568,
            4.166666666666666,
            0.5836575875486382,
            4.761904761904762,
            6.0606060606060606,
            6.0606060606060606,
            1.7683970336565886,
            2.3255813953488373,
            6.0606060606060606,
            6.666666666666667,
            0.7534983853606028,
            14.285714285714285,
            0.44798407167745147,
            0.22257551669316375,
            0.11627906976744186,
            2.215909090909091,
            1.2658227848101267,
            4.23728813559322,
            0.5235602094240838,
            0.847457627118644,
            1.7543859649122806,
            1.1299435028248588,
            0.19607843137254902,
            5.0,
            7.6923076923076925,
            6.122448979591836,
            2.564102564102564,
            5.0,
            4.166666666666666,
            2.393617021276596,
            3.474903474903475,
            9.523809523809524,
            10.526315789473683,
            10.526315789473683,
            6.25,
            3.7037037037037033,
            4.444444444444445,
            4.602510460251046,
            0.5656108597285068,
            1.6778523489932886,
            0.024021138601969732,
            1.3215859030837005,
            0.0691085003455425,
            0.21536252692031585,
            0.21536252692031585,
            0.0691085003455425,
            0.0691085003455425,
            0.21536252692031585,
            6.738544474393531,
            6.493506493506493,
            2.5906735751295336,
            1.8867924528301887,
            4.166666666666666,
            10.526315789473683,
            10.0,
            0.9324009324009324,
            0.26455026455026454,
            2.717391304347826,
            2.4390243902439024,
            6.25,
            8.333333333333332,
            2.857142857142857,
            0.7692307692307693,
            8.333333333333332,
            1.4925373134328357,
            1.8181818181818181,
            1.9607843137254901,
            1.592920353982301,
            0.7736943907156674,
            0.18288222384784197,
            7.954545454545454,
            2.848101265822785,
            4.6875,
            2.849740932642487,
            1.834862385321101,
            0.8210180623973727,
            4.3478260869565215,
            2.7777777777777777,
            1.3986013986013985,
            3.3948538326822044,
            0.7854688267059401,
            0.10559662090813093,
            4.932735426008969,
            5.303030303030303,
            1.1142061281337048,
            0.32573289902280134
        ],
        "annotation_related_insertion_edits_vs_all_commit": [],
        "annotation_related_deletion_edits_vs_all_commit": [],
        "s5": "------------------------------------------------------------------------",
        "RQ5": "Relation of properties of projects vs. properties of type changes.",
        "matrix_commits_stars_annotations": [
            [
                "2017",
                "778",
                "972",
                "2998",
                "287",
                "17",
                "771",
                "2312",
                "64",
                "0",
                "0",
                "8930"
            ]
        ],
        "matrix_files_annotations": [],
        "matrix_test_files_annotations": [],
        "dict_funct_call_no_types": {},
        "dict_funct_call_types": {},
        "s6": "------------------------------------------------------------------------",
        "RQ6": "Which are the top 10 repository with the highest number of type annotations.",
        "number_type_annotations_per_repo": {
            "https://github.com/awslabs/sockeye": 2998
        },
        "s7": "------------------------------------------------------------------------",
        "RQ7": "How many of all types are annotated in the last version of the code?",
        "typeLastProjectVersion_total": 1513,
        "typeLastProjectVersion_average": 0,
        "typeLastProjectVersion_percentage": [
            71.6
        ],
        "typeLastProjectVersion_dict": {
            "https://github.com/awslabs/sockeye": 1513
        },
        "typeLastProjectVersion_dict_error": {},
        "RQ8": "Total number of annotations over time, across all projects",
        "typeAnnotation_year_analysis": {
            "2017": 558,
            "2018": 549,
            "2019": 212,
            "2020": 53,
            "2021": 741
        },
        "RQ9": "Total number of annotation-related commit over time, across all projects",
        "typeAnnotation_commit_annotation_year_analysis": {
            "2017": 47,
            "2018": 37,
            "2019": 31,
            "2020": 9,
            "2021": 7
        },
        "typeAnnotation_commit_not_annotation_year_analysis": {
            "2017": 181,
            "2018": 175,
            "2019": 136,
            "2020": 103,
            "2021": 41
        },
        "RQ10": "Type annotation coverage for each each",
        "annotation_coverage": {
            "2014": [
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "2015": [
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "2016": [
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "2017": [
                821,
                638,
                210,
                311,
                0,
                1806
            ],
            "2018": [
                1794,
                1381,
                485,
                671,
                0,
                4511
            ],
            "2019": [
                3164,
                2628,
                851,
                1290,
                0,
                8070
            ],
            "2020": [
                1241,
                1245,
                343,
                610,
                0,
                3394
            ]
        },
        "RQ11": "Developers statistics",
        "list_dev_dict": [
            {
                "awslabs-sockeye": 0,
                "fhieber@amazon.com": 1,
                "davvil@gmail.com": 1,
                "kellen.sunderland@gmail.com": 1,
                "fhieber@users.noreply.github.com": 50,
                "mdenkows@cs.cmu.edu": 6,
                "dvilar@amazon.com": 6,
                "tdomhan@gmail.com": 14,
                "post@cs.jhu.edu": 11,
                "gposhta@gmail.com": 1,
                "artemsok@amazon.de": 2,
                "niuoxstar@gmail.com": 2,
                "Deseaus@users.noreply.github.com": 2,
                "michael.j.denkowski@gmail.com": 2,
                "loris.bazzani@gmail.com": 3,
                "zarana.parekh.daiict@gmail.com": 1,
                "xinyu1.chen@intel.com": 1,
                "mathias.mueller@uzh.ch": 2,
                "mathmu@amazon.com": 1,
                "25341135+artemsok@users.noreply.github.com": 3,
                "stchistiakova@gmail.com": 1,
                "fhieber@amazon.de": 9,
                "mdenkows@amazon.com": 4,
                "domhant@amazon.de": 2,
                "56725192+kpuatamazon@users.noreply.github.com": 1,
                "emilmont@gmail.com": 1,
                "53558588+marismmm@users.noreply.github.com": 1,
                "hmashlah@users.noreply.github.com": 1,
                "32569511+celinadongye@users.noreply.github.com": 1
            }
        ],
        "list_dev_dict_total": [
            {
                "awslabs-sockeye": 0,
                "fhieber@amazon.com": 1,
                "fhieber@amazon.de": 80,
                "tdomhan@gmail.com": 101,
                "fhieber@users.noreply.github.com": 305,
                "kellen.sunderland@gmail.com": 11,
                "davvil@gmail.com": 2,
                "daniel.e.beck@gmail.com": 1,
                "logogin@users.noreply.github.com": 7,
                "mdenkows@cs.cmu.edu": 15,
                "niuoxstar@gmail.com": 7,
                "gposhta@gmail.com": 5,
                "P.Schulz@uva.nl": 1,
                "viacheslav@b0noi.com": 1,
                "dvilar@amazon.com": 20,
                "mdenkows@amazon.com": 35,
                "abd.badawy@gmail.com": 3,
                "post@cs.jhu.edu": 41,
                "press@ofir.io": 1,
                "lefterav@pindi.me": 7,
                "mathias.mueller@uzh.ch": 18,
                "mathias.mueller@.uzh.ch": 1,
                "artemsok@amazon.de": 6,
                "hyandell@amazon.com": 2,
                "loris.bazzani@gmail.com": 7,
                "Deseaus@users.noreply.github.com": 7,
                "john.rieth@outlook.com": 1,
                "fiorillo@users.noreply.github.com": 1,
                "michael.j.denkowski@gmail.com": 10,
                "zarana.parekh.daiict@gmail.com": 1,
                "rong.a.zhang@intel.com": 1,
                "popel@ufal.mff.cuni.cz": 1,
                "bojian.zheng@mail.utoronto.ca": 1,
                "xinyu1.chen@intel.com": 1,
                "franck.burlot@gmail.com": 1,
                "bittlingmayer@users.noreply.github.com": 1,
                "mathmu@amazon.com": 1,
                "25341135+artemsok@users.noreply.github.com": 11,
                "mitchell.gordon95@gmail.com": 1,
                "miguelrgraca@gmail.com": 1,
                "hmashlah@users.noreply.github.com": 4,
                "SamuelLarkin@users.noreply.github.com": 6,
                "tom.lippincott@gmail.com": 1,
                "sjbradtke@gmail.com": 5,
                "stchistiakova@gmail.com": 1,
                "rherbrich@gmail.com": 1,
                "domhant@amazon.de": 17,
                "56725192+kpuatamazon@users.noreply.github.com": 4,
                "annacurrey@users.noreply.github.com": 2,
                "brentonlongchu@gmail.com": 1,
                "emilmont@gmail.com": 1,
                "53558588+marismmm@users.noreply.github.com": 2,
                "jtrenous@gmail.com": 1,
                "tholiao@gmail.com": 1,
                "barbaradarques@users.noreply.github.com": 1,
                "yungilbert@gmail.com": 1,
                "bchu@nvidia.com": 1,
                "yktnlp@gmail.com": 1,
                "gjii@amazon.com": 1,
                "gonzaloiglesiasiglesias@users.noreply.github.com": 3,
                "ketranm@users.noreply.github.com": 2,
                "32569511+celinadongye@users.noreply.github.com": 1,
                "david.vilar@gmail.com": 1,
                "raghu1991.p@gmail.com": 1
            }
        ],
        "dev_dict": {},
        "dev_dict_total": {},
        "list_dev_plot": []
    }
]