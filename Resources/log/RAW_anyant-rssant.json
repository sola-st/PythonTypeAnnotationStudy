[
    {
        "execution_time": "",
        "machine": {
            "OS": "Linux-4.15.0-166-generic-x86_64-with-Ubuntu-18.04-bionic",
            "CPU": "x86_64",
            "CORES": 48
        },
        "total_repositories": 1,
        "total_commits": 761,
        "commit_year_dict": {
            "2019": 300,
            "2020": 323,
            "2021": 138
        },
        "loc_year_edit": {
            "2019": 42391,
            "2020": 94433,
            "2021": 12863
        },
        "s0": "------------------------------------------------------------------------",
        "RQ0": "How many types are used?",
        "code_changes": [],
        "commit_statistics": [],
        "repo_with_types_changes": 1,
        "percentage_repo_with_typeChanges": "",
        "commits_with_typeChanges": 139,
        "percentage_commits_with_typeChanges": "",
        "total_typeAnnotation_codeChanges": 1199,
        "s1": "------------------------------------------------------------------------",
        "RQ1": "Are type annotation inserted, removed and changed?",
        "insert_types": {
            "2019": 241,
            "2020": 623,
            "2021": 70
        },
        "percentage_insert_types": "",
        "remove_types": {
            "2019": 75,
            "2020": 151,
            "2021": 3
        },
        "percentage_remove_types": "",
        "modify_existing_types": {
            "2019": 4,
            "2020": 28,
            "2021": 4
        },
        "percentage_modify_existing_types": "",
        "s2": "------------------------------------------------------------------------",
        "RQ2_1": "What types are added (generic, numeric, ...)?",
        "anyType_added": 0,
        "noneType_added": 0,
        "numericType_added": 0,
        "binarySequenceType_added": 0,
        "textSequenceType_added": 0,
        "mappingTypes_added": 0,
        "setTypes_added": 0,
        "sequenceType_added": 0,
        "newType_added": 0,
        "total_added": 934,
        "RQ2_2": "What are the top 5 types added?",
        "typeAdded_dict": {
            "t.int": 13,
            "t.url": 8,
            "rssfeedschema": 5,
            "call(\n    func=attribute(\n        value=attribute(\n            value=attribute(\n                value=name(\n                    value='t',\n                    lpar=[],\n                    rpar=[],\n                ),\n                attr=name(\n                    value='cursor',\n                    lpar=[],\n                    rpar=[],\n                ),\n                dot=dot(\n                    whitespace_before=simplewhitespace(\n                        value='',\n                    ),\n                    whitespace_after=simplewhitespace(\n                        value='',\n                    ),\n                ),\n                lpar=[],\n                rpar=[],\n            ),\n            attr=name(\n                value='object',\n                lpar=[],\n                rpar=[],\n            ),\n            dot=dot(\n                whitespace_before=simplewhitespace(\n                    value='',\n                ),\n                whitespace_after=simplewhitespace(\n                    value='',\n                ),\n            ),\n            lpar=[],\n            rpar=[],\n        ),\n        attr=name(\n            value='keys',\n            lpar=[],\n            rpar=[],\n        ),\n        dot=dot(\n            whitespace_before=simplewhitespace(\n                value='',\n            ),\n            whitespace_after=simplewhitespace(\n                value='',\n            ),\n        ),\n        lpar=[],\n        rpar=[],\n    ),\n    args=[\n        arg(\n            value=simplestring(\n                value=\"'id'\",\n                lpar=[],\n                rpar=[],\n            ),\n            keyword=none,\n            equal=maybesentinel.default,\n            comma=maybesentinel.default,\n            star='',\n            whitespace_after_star=simplewhitespace(\n                value='',\n            ),\n            whitespace_after_arg=simplewhitespace(\n                value='',\n            ),\n        ),\n    ],\n    lpar=[],\n    rpar=[],\n    whitespace_after_func=simplewhitespace(\n        value='',\n    ),\n    whitespace_before_args=simplewhitespace(\n        value='',\n    ),\n).optional": 1,
            "userschema": 1,
            "int": 146,
            "t_feed_unionid": 3,
            "bytes": 47,
            "tuple": 3,
            "envconfig": 4,
            "t.str": 14,
            "str": 246,
            "actorregistery": 4,
            "list [actormessage]": 2,
            "list [str]": 3,
            "actorcontext": 49,
            "nodespecschema": 5,
            "messagesender": 2,
            "actorexecutor": 2,
            "actor": 1,
            "dict": 32,
            "actormessage": 9,
            "feedschema.optional": 1,
            "feedschema": 2,
            "t.dict": 3,
            "aiohttp.clientresponse": 6,
            "socket.socket": 2,
            "set": 3,
            "list": 20,
            "list [dict]": 4,
            "actorstoragebase": 3,
            "bool": 48,
            "none": 21,
            "optional [dict]": 1,
            "list [dict [str,tuple [dict,dict]]]": 1,
            "datetime.timedelta": 1,
            "\"actorlib.node.actornode\"": 1,
            "attribute(\n    value=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='list',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [actormessage]": 2,
            "actormessagequeue": 2,
            "future": 1,
            "\"actormessage\"": 2,
            "actorstate": 6,
            "compactprepareinfo": 2,
            "request": 2,
            "\"feed\"": 1,
            "attribute(\n    value=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='list',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [storyimageindexitem]": 1,
            "monthlystorycount": 1,
            "'feed'": 2,
            "'story'": 1,
            "sociallogin": 2,
            "emailaddress": 1,
            "socialaccount": 1,
            "user": 1,
            "requests.response": 7,
            "attribute(\n    value=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='tuple',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [int,aiohttp]": 1,
            "attribute(\n    value=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='tuple',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [int,requests]": 1,
            "feedcontenttype": 2,
            "feedparser.feedparserdict": 2,
            "feedresponse": 10,
            "atoma.jsonfeed": 1,
            "atoma.jsonfeeditem": 1,
            "rawfeedresult": 8,
            "rawfeedschema": 1,
            "attribute(\n    value=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='list',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [rawstoryschema]": 1,
            "list [tuple [bytes,bytes]]": 1,
            "\"feedchecksum\"": 3,
            "feedchecksum": 2,
            "feedresult": 6,
            "list [storyschema]": 1,
            "datetime.datetime": 11,
            "tuple [feedresponse,feedresult]": 1,
            "type [feedreader]": 11,
            "httpserver": 16,
            "werkzeugrequest": 2,
            "werkzeugresponse": 2,
            "float": 2,
            "storyattach": 1,
            "rawjsonfeeditem": 2,
            "requests.preparedrequest": 2,
            "rssproxyclient": 1,
            "list [dict [str,any]]": 2,
            "asyncio.baseeventloop": 1,
            "dnsservice": 6,
            "aiohttp.asyncresolver": 4,
            "yarl.url": 2,
            "userfeed": 1,
            "seaweedclient": 4,
            "seaweedstory": 2,
            "\"seaweeddata\"": 1,
            "\"storyuniqueidsdata\"": 1,
            "seaweedstorystorage": 1,
            "story": 2,
            "commonstory": 2,
            "httprequest": 8,
            "profiler": 1,
            "attribute(\n    value=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='list',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [seaweedstory]": 1,
            "attribute(\n    value=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='list',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [commonstory]": 1,
            "attribute(\n    value=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='tuple',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [int,int]": 2,
            "attribute(\n    value=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='tuple',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [int,int,int,int]": 2,
            "\"storydata\"": 1,
            "engine": 4,
            "postgresclient": 1,
            "list [_key]": 8,
            "list [tuple [_key,str]]": 8,
            "callable": 2,
            "dict [int,list [_key]]": 1,
            "dict [int,list [tuple [_key,str]]]": 1,
            "\"storyinfo\"": 1,
            "attribute(\n    value=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='list',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [\"storyinfo\"]": 1,
            "call(\n    func=attribute(\n        value=attribute(\n            value=name(\n                value='t',\n                lpar=[],\n                rpar=[],\n            ),\n            attr=name(\n                value='dict',\n                lpar=[],\n                rpar=[],\n            ),\n            dot=dot(\n                whitespace_before=simplewhitespace(\n                    value='',\n                ),\n                whitespace_after=simplewhitespace(\n                    value='',\n                ),\n            ),\n            lpar=[],\n            rpar=[],\n        ),\n        attr=name(\n            value='key',\n            lpar=[],\n            rpar=[],\n        ),\n        dot=dot(\n            whitespace_before=simplewhitespace(\n                value='',\n            ),\n            whitespace_after=simplewhitespace(\n                value='',\n            ),\n        ),\n        lpar=[],\n        rpar=[],\n    ),\n    args=[\n        arg(\n            value=attribute(\n                value=name(\n                    value='t',\n                    lpar=[],\n                    rpar=[],\n                ),\n                attr=name(\n                    value='str',\n                    lpar=[],\n                    rpar=[],\n                ),\n                dot=dot(\n                    whitespace_before=simplewhitespace(\n                        value='',\n                    ),\n                    whitespace_after=simplewhitespace(\n                        value='',\n                    ),\n                ),\n                lpar=[],\n                rpar=[],\n            ),\n            keyword=none,\n            equal=maybesentinel.default,\n            comma=maybesentinel.default,\n            star='',\n            whitespace_after_star=simplewhitespace(\n                value='',\n            ),\n            whitespace_after_arg=simplewhitespace(\n                value='',\n            ),\n        ),\n    ],\n    lpar=[],\n    rpar=[],\n    whitespace_after_func=simplewhitespace(\n        value='',\n    ),\n    whitespace_before_args=simplewhitespace(\n        value='',\n    ),\n).optional": 1,
            "io.fileio": 1,
            "attribute(\n    value=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='list',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [user]": 1,
            "'imagetoken'": 1,
            "timezone.datetime": 2,
            "requests.request": 1,
            "feedcreation": 1,
            "attribute(\n    value=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='list',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [dict]": 1,
            "httpresponse": 2,
            "response": 1,
            "storycontentinfo": 3,
            "fulltextacceptstrategy": 1,
            "githubconfigmodel": 1,
            "feed": 1
        },
        "RQ2_3": "What types are removed (generic, numeric, ...)?",
        "anyType_removed": 0,
        "noneType_removed": 0,
        "numericType_removed": 0,
        "binarySequenceType_removed": 0,
        "textSequenceType_removed": 0,
        "mappingTypes_removed": 0,
        "setTypes_removed": 0,
        "sequenceType_removed": 0,
        "newType_removed": 0,
        "total_removed": 229,
        "RQ2_4": "What are the top 5 types removed?",
        "typeRemoved_dict": {
            "t.int": 5,
            "t.url": 2,
            "rssfeedschema": 2,
            "int": 61,
            "actorcontext": 5,
            "nodespecschema": 3,
            "list [dict]": 4,
            "list": 4,
            "messagesender": 2,
            "actorstoragebase": 4,
            "actormessage": 10,
            "object": 2,
            "none": 15,
            "str": 50,
            "actorexecutor": 1,
            "actorregistery": 1,
            "optional [dict]": 1,
            "dict": 4,
            "list [dict [str,tuple [dict,dict]]]": 1,
            "bool": 3,
            "actorstate": 1,
            "envconfig": 1,
            "t.str": 2,
            "datetime.timedelta": 1,
            "attribute(\n    value=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='tuple',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [int,aiohttp]": 1,
            "feedcontenttype": 1,
            "feedresponse": 1,
            "atoma.jsonfeeditem": 1,
            "requests.preparedrequest": 1,
            "werkzeugrequest": 1,
            "httpserver": 1,
            "werkzeugresponse": 1,
            "bytes": 12,
            "datetime.datetime": 4,
            "seaweedstory": 1,
            "attribute(\n    value=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='list',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [commonstory]": 1,
            "seaweedclient": 4,
            "\"seaweeddata\"": 1,
            "attribute(\n    value=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='tuple',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [int,int]": 1,
            "attribute(\n    value=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='tuple',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [int,int,int,int]": 1,
            "tuple": 2,
            "list [_key]": 2,
            "list [tuple [_key,str]]": 2,
            "aiohttp.asyncresolver": 3,
            "list [dict [str,any]]": 1,
            "type [feedreader]": 1
        },
        "RQ2_5": "What types are the top 10 changed ?",
        "total_changed": 36,
        "typeChanged_dict_var": {
            "int -> float": 1
        },
        "typeChanged_dict_arg": {
            "t.int -> t_feed_unionid": 1,
            "bytes -> dict": 1,
            "seaweedstorystorage -> postgresstorystorage": 1
        },
        "typeChanged_dict_ret": {
            "none -> actormessage": 1,
            "dict -> actormessage": 1,
            "aiohttp.clientresponse -> feedresponse": 1,
            "attribute(\n    value=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='tuple',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [int,requests] -> feedresponse": 1,
            "bool -> feedcontenttype": 2,
            "feedcontenttype -> str": 1,
            "\"feedchecksum\" -> int": 1,
            "bytes -> \"feedchecksum\"": 1,
            "bool -> bytes": 1,
            "bytes -> bool": 1,
            "\"feedchecksum\" -> bytes": 1,
            "feedresult -> list": 1,
            "rawfeedresult -> str": 1,
            "feedresult -> rawfeedresult": 1,
            "tuple [feedresponse,feedresult] -> tuple [feedresponse,rawfeedresult]": 1,
            "str -> attribute(\n    value=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='list',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [str]": 1,
            "none -> list": 1,
            "bytes -> str": 2,
            "seaweedstory -> none": 1,
            "attribute(\n    value=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='list',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [seaweedstory] -> none": 1,
            "str -> int": 1,
            "str -> engine": 1,
            "bytes -> int": 1,
            "list [tuple [_key,str]] -> tuple": 1,
            "bool -> callable": 1,
            "float -> bool": 1,
            "envconfig -> str": 1,
            "callable -> str": 1,
            "rawfeedresult -> bytes": 1,
            "envconfig -> list": 1
        },
        "s3": "------------------------------------------------------------------------",
        "RQ3_1": "Where are types added (function args, function returns, variables)?",
        "functionArgsType_added": 544,
        "functionReturnsType_added": 263,
        "variableType_added": 127,
        "RQ3_2": "Where are types removed (function args, function returns, variables)?",
        "functionArgsType_removed": 135,
        "functionReturnsType_removed": 65,
        "variableType_removed": 29,
        "RQ3_3": "Where are types changed (function args, function returns, variables?",
        "functionArgsType_changed": 3,
        "functionReturnsType_changed": 32,
        "variableType_changed": 1,
        "s4": "------------------------------------------------------------------------",
        "RQ4_1": "Are types added along with other changes around this code or in commits that only add types?",
        "typeAnnotation_added_per_commit": 0,
        "list_typeAnnotation_added_per_commit": [],
        "RQ4_2": "Are types removed along with other changes around this code or in commits that only add types?",
        "typeAnnotation_removed_per_commit": 0,
        "list_typeAnnotation_removed_per_commit": [],
        "RQ4_3": "Are types changed along with other changes around this code or in commits that only add types?",
        "typeAnnotation_changed_per_commit": 0,
        "list_typeAnnotation_changed_per_commit": [
            1.0452961672473868,
            7.142857142857142,
            6.382978723404255,
            1.2345679012345678,
            0.8333333333333334,
            4.3478260869565215,
            1.7241379310344827,
            2.0242914979757085,
            6.8181818181818175,
            0.3424657534246575,
            0.12484394506866417,
            0.21691973969631237,
            1.5625,
            0.6535947712418301,
            0.5780346820809248,
            1.5170670037926675,
            2.4390243902439024,
            0.6944444444444444,
            0.2557544757033248,
            1.5384615384615385,
            4.201680672268908,
            6.451612903225806,
            3.0534351145038165,
            1.6260162601626018,
            5.202312138728324,
            3.6036036036036037,
            3.571428571428571,
            0.7677543186180422,
            1.5673981191222568,
            0.6818181818181818,
            1.25,
            2.380952380952381,
            0.7042253521126761,
            1.2987012987012987,
            0.6493506493506493,
            1.8205461638491547,
            0.4807692307692308,
            8.695652173913043,
            0.24271844660194172,
            0.6369426751592357,
            3.125,
            4.081632653061225,
            2.049689440993789,
            2.073365231259968,
            1.335707925200356,
            1.301921884686919,
            0.07304601899196494,
            2.5547445255474455,
            0.9259259259259258,
            2.2900763358778624,
            0.9803921568627451,
            0.8771929824561403,
            1.694915254237288,
            0.14992503748125938,
            0.6666666666666667,
            0.6896551724137931,
            5.555555555555555,
            0.10416666666666667,
            1.8518518518518516,
            0.38167938931297707,
            2.5316455696202533,
            5.263157894736842,
            2.631578947368421,
            8.47457627118644,
            16.666666666666664,
            0.6172839506172839,
            15.418502202643172,
            3.289473684210526,
            0.4405286343612335,
            4.439746300211417,
            0.4032258064516129,
            0.2766251728907331,
            5.660377358490567,
            5.0,
            6.796116504854369,
            1.1764705882352942,
            0.5291005291005291,
            7.317073170731707,
            2.857142857142857,
            2.564102564102564,
            1.8867924528301887,
            2.6737967914438503,
            0.3454231433506045,
            3.3333333333333335,
            1.7543859649122806,
            5.14018691588785,
            0.2590673575129534,
            0.7142857142857143,
            3.4482758620689653,
            1.6666666666666667,
            1.0600706713780919,
            0.24154589371980675,
            0.4807692307692308,
            0.9966777408637874,
            3.571428571428571,
            0.15847860538827258,
            1.7543859649122806,
            2.7777777777777777,
            2.564102564102564,
            0.38022813688212925,
            0.5586592178770949,
            3.6036036036036037,
            2.666666666666667,
            3.260869565217391,
            10.638297872340425,
            1.9867549668874174,
            0.33860045146726864,
            0.3409090909090909,
            2.9940119760479043,
            13.461538461538462,
            2.3255813953488373,
            7.4074074074074066,
            3.8461538461538463,
            5.263157894736842,
            0.49504950495049505,
            1.3297872340425532,
            5.0,
            5.0,
            2.5,
            0.6211180124223602,
            9.119496855345911,
            12.365591397849462,
            0.9823182711198428,
            2.564102564102564,
            6.799336650082918,
            5.970149253731343,
            10.416666666666668,
            4.166666666666666,
            0.591715976331361,
            3.8724373576309796,
            0.19083969465648853,
            6.25,
            0.16835016835016833,
            3.571428571428571,
            10.714285714285714,
            10.0,
            2.564102564102564,
            6.25,
            3.3333333333333335,
            33.33333333333333,
            3.125,
            2.564102564102564,
            5.88235294117647,
            3.3333333333333335,
            11.11111111111111,
            6.097560975609756,
            2.272727272727273,
            2.564102564102564,
            8.571428571428571,
            8.108108108108109,
            14.285714285714285,
            7.317073170731707,
            2.6785714285714284,
            4.761904761904762,
            5.88235294117647,
            1.6129032258064515,
            1.2658227848101267,
            14.285714285714285,
            10.344827586206897,
            2.4096385542168677,
            1.0204081632653061,
            2.1739130434782608,
            5.1020408163265305,
            0.9174311926605505,
            4.697986577181208,
            1.593625498007968,
            0.37174721189591076,
            0.2403846153846154,
            4.782608695652174,
            0.8403361344537815,
            8.0,
            1.214574898785425,
            3.7037037037037033,
            3.125,
            4.411764705882353,
            4.166666666666666,
            1.2048192771084338,
            2.941176470588235,
            9.67741935483871,
            0.24556616643929058,
            2.564102564102564,
            5.681818181818182,
            0.8695652173913043,
            13.157894736842104,
            2.5,
            2.5,
            2.5,
            2.5,
            2.272727272727273,
            0.6896551724137931,
            0.6666666666666667,
            3.8461538461538463,
            12.5,
            0.034071550255536626,
            20.0,
            7.4074074074074066,
            3.7037037037037033,
            6.896551724137931,
            4.069767441860465,
            1.2195121951219512
        ],
        "annotation_related_insertion_edits_vs_all_commit": [],
        "annotation_related_deletion_edits_vs_all_commit": [],
        "s5": "------------------------------------------------------------------------",
        "RQ5": "Relation of properties of projects vs. properties of type changes.",
        "matrix_commits_stars_annotations": [
            [
                "2019",
                "761",
                "569",
                "1199",
                "63",
                "7",
                "141",
                "1861",
                "4",
                "0",
                "0",
                "3596"
            ]
        ],
        "matrix_files_annotations": [],
        "matrix_test_files_annotations": [],
        "dict_funct_call_no_types": {},
        "dict_funct_call_types": {},
        "s6": "------------------------------------------------------------------------",
        "RQ6": "Which are the top 10 repository with the highest number of type annotations.",
        "number_type_annotations_per_repo": {
            "https://github.com/anyant/rssant": 1199
        },
        "s7": "------------------------------------------------------------------------",
        "RQ7": "How many of all types are annotated in the last version of the code?",
        "typeLastProjectVersion_total": 775,
        "typeLastProjectVersion_average": 0,
        "typeLastProjectVersion_percentage": [
            82.98
        ],
        "typeLastProjectVersion_dict": {
            "https://github.com/anyant/rssant": 775
        },
        "typeLastProjectVersion_dict_error": {},
        "RQ8": "Total number of annotations over time, across all projects",
        "typeAnnotation_year_analysis": {
            "2019": 241,
            "2020": 623,
            "2021": 70
        },
        "RQ9": "Total number of annotation-related commit over time, across all projects",
        "typeAnnotation_commit_annotation_year_analysis": {
            "2019": 46,
            "2020": 71,
            "2021": 22
        },
        "typeAnnotation_commit_not_annotation_year_analysis": {
            "2019": 252,
            "2020": 218,
            "2021": 116
        },
        "RQ10": "Type annotation coverage for each each",
        "annotation_coverage": {
            "2014": [
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "2015": [
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "2016": [
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "2017": [
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "2018": [
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "2019": [
                77,
                1187,
                26,
                637,
                0,
                1771
            ],
            "2020": [
                309,
                1803,
                165,
                970,
                76,
                3408
            ]
        },
        "RQ11": "Developers statistics",
        "list_dev_dict": [
            {
                "anyant-rssant": 0,
                "guyskk@qq.com": 139
            }
        ],
        "list_dev_dict_total": [
            {
                "anyant-rssant": 0,
                "guyskk@qq.com": 743,
                "jasonqiao36@gmail.com": 1,
                "49699333+dependabot[bot]@users.noreply.github.com": 17
            }
        ],
        "dev_dict": {},
        "dev_dict_total": {},
        "list_dev_plot": []
    }
]