[
    {
        "execution_time": "",
        "machine": {
            "OS": "Linux-4.15.0-166-generic-x86_64-with-Ubuntu-18.04-bionic",
            "CPU": "x86_64",
            "CORES": 48
        },
        "total_repositories": 1,
        "total_commits": 1547,
        "commit_year_dict": {
            "2019": 788,
            "2020": 635,
            "2021": 124
        },
        "loc_year_edit": {
            "2019": 132953,
            "2020": 92943,
            "2021": 37615
        },
        "s0": "------------------------------------------------------------------------",
        "RQ0": "How many types are used?",
        "code_changes": [],
        "commit_statistics": [],
        "repo_with_types_changes": 1,
        "percentage_repo_with_typeChanges": "",
        "commits_with_typeChanges": 255,
        "percentage_commits_with_typeChanges": "",
        "total_typeAnnotation_codeChanges": 2882,
        "s1": "------------------------------------------------------------------------",
        "RQ1": "Are type annotation inserted, removed and changed?",
        "insert_types": {
            "2019": 596,
            "2020": 976,
            "2021": 334
        },
        "percentage_insert_types": "",
        "remove_types": {
            "2019": 121,
            "2020": 98,
            "2021": 138
        },
        "percentage_remove_types": "",
        "modify_existing_types": {
            "2019": 93,
            "2020": 487,
            "2021": 39
        },
        "percentage_modify_existing_types": "",
        "s2": "------------------------------------------------------------------------",
        "RQ2_1": "What types are added (generic, numeric, ...)?",
        "anyType_added": 0,
        "noneType_added": 0,
        "numericType_added": 0,
        "binarySequenceType_added": 0,
        "textSequenceType_added": 0,
        "mappingTypes_added": 0,
        "setTypes_added": 0,
        "sequenceType_added": 0,
        "newType_added": 0,
        "total_added": 1906,
        "RQ2_2": "What are the top 5 types added?",
        "typeAdded_dict": {
            "col [np]": 6,
            "dataframe": 51,
            "x": 10,
            "pd.series": 8,
            "types.datatype": 8,
            "list [str]": 15,
            "list [indexinfo]": 3,
            "optional [list [indexinfo]]": 2,
            "none": 62,
            "optional [list [str]]": 10,
            "list [optional [str]]": 3,
            "'metadata'": 2,
            "pd.dataframe": 10,
            "spark.column": 20,
            "datatype": 12,
            "spark.dataframe": 23,
            "callable": 7,
            "dict": 2,
            "union [pd,pd]": 1,
            "_frame": 1,
            "list [columnlike]": 2,
            "str": 110,
            "series": 22,
            "union [columnlike]": 1,
            "any": 43,
            "ks.dataframe": 1,
            "'ks.dataframe'": 2,
            "tuple [pyspark,list [str]]": 1,
            "union [str,list [str]]": 4,
            "int": 62,
            "optional [int]": 12,
            "typing.callable": 2,
            "'ks.series'": 71,
            "'dataframe'": 19,
            "bool": 182,
            "tuple [str,str]": 2,
            "optional [list [indexmap]]": 4,
            "union [float,int]": 4,
            "'series'": 14,
            "union ['pd.dataframe','pd.series']": 1,
            "optional [float]": 2,
            "structtype": 3,
            "'any'": 2,
            "optional [spark]": 8,
            "'index'": 1,
            "list [spark]": 2,
            "pd.index": 11,
            "'multiindex'": 1,
            "ks.series": 36,
            "union [bool,list [bool]]": 2,
            "optional ['dataframe']": 1,
            "union ['series',none]": 1,
            "optional ['series']": 1,
            "optional [union [str,list [str]]]": 32,
            "pythonmodelwrapper": 1,
            "optional [list [float]]": 2,
            "float": 7,
            "attribute(\n    value=name(\n        value='koalas',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='col',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [int]": 1,
            "_internalframe": 2,
            "metadata": 2,
            "list [indexmap]": 3,
            "'_internalframe'": 4,
            "union [np,list [tuple],dict,pd]": 1,
            "union [str,list,np]": 1,
            "list": 7,
            "union [str,list [str],none]": 8,
            "dict [str,any]": 1,
            "sparksession": 1,
            "optional [str]": 27,
            "union [str,'structtype']": 1,
            "union [str,moduletype]": 1,
            "optional [signature]": 3,
            "exception": 1,
            "optional [any]": 11,
            "optional [union [int,str]]": 4,
            "optional [bool]": 4,
            "union [int,str]": 20,
            "optional [list [tuple [str]]]": 1,
            "union [list [tuple [str]],_novaluetype]": 1,
            "union [list [str],_novaluetype]": 2,
            "union [str,_novaluetype]": 3,
            "list [tuple [str]]": 1,
            "union [str,tuple [str]]": 3,
            "union [tuple [type,...],type]": 2,
            "tuple [callable [...,bool],str]": 2,
            "union [str,tuple [str,...]]": 13,
            "iterable": 10,
            "union [list [str],dict [str,list [str]]]": 1,
            "union [str,tuple [str,...],list [str],list [tuple [str,...]]]": 2,
            "union [str,tuple]": 1,
            "datetime": 1,
            "union [str,list [str],tuple [str,...],list [tuple [str,...]]]": 3,
            "union [dataframe,list]": 2,
            "union [list [spark],_novaluetype]": 2,
            "tuple": 5,
            "pd.multiindex": 4,
            "list [union [spark,'ks.series']]": 1,
            "union [spark,'ks.series']": 1,
            "union [list [tuple [str,...]],_novaluetype]": 2,
            "attribute(\n    value=name(\n        value='ks',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='dataframe',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [int]": 3,
            "attribute(\n    value=name(\n        value='ks',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='series',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [int]": 3,
            "optional [list [tuple [str,...]]]": 18,
            "optional [union [list [str],_novaluetype]]": 2,
            "list [tuple [str,...]]": 2,
            "\"series\"": 66,
            "\"dataframe\"": 98,
            "optional [union [str,list [str],tuple [str,...],list [tuple [str,...]]]]": 1,
            "optional [list [spark]]": 2,
            "tuple [str,...]": 9,
            "union [spark,_novaluetype]": 1,
            "optional [union [list [spark],_novaluetype]]": 1,
            "optional [union [spark,_novaluetype]]": 1,
            "union [\"ks.dataframe\",spark]": 1,
            "slice": 6,
            "tuple [optional [spark],optional [int],optional [int]]": 16,
            "tuple [list [tuple [str,...]],optional [list [spark]],bool]": 17,
            "\"ks.series\"": 66,
            "\"ks.series[np.int64]\"": 2,
            "\"ks.series[str]\"": 2,
            "series [np]": 1,
            "union [\"ks.series\",\"ks.dataframe\"]": 41,
            "attribute(\n    value=name(\n        value='ks',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='series',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [np]": 4,
            "attribute(\n    value=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='union',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [seriestype,dataframetype,scalartype,unknowntype]": 2,
            "attribute(\n    value=name(\n        value='ks',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='dataframe',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [np,np]": 1,
            "np.float64": 1,
            "list [union [series,tuple [str,...]]]": 2,
            "list [series]": 5,
            "tuple [dataframe,list [series],list [tuple [str,...]]]": 1,
            "\"dataframegroupby\"": 1,
            "\"seriesgroupby\"": 1,
            "set [tuple [str,...]]": 2,
            "union [\"dataframe\",\"indexopsmixin\"]": 2,
            "union [\"indexopsmixin\"]": 2,
            "\"ks.dataframe\"": 10,
            "\"cacheddataframe\"": 6,
            "attribute(\n    value=name(\n        value='pd',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='series',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [int]": 1,
            "attribute(\n    value=name(\n        value='pd',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='series',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [np]": 1,
            "\"pd.dataframe[np.float, str]\"": 1,
            "\"pandas.dataframe[np.float]\"": 1,
            "\"pd.series[int]\"": 1,
            "attribute(\n    value=name(\n        value='pd',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='dataframe',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [np,str]": 1,
            "attribute(\n    value=name(\n        value='pd',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='dataframe',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [np]": 1,
            "internalframe": 9,
            "\"index\"": 43,
            "attribute(\n    value=name(\n        value='pd',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='dataframe',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [pdf]": 3,
            "'pd.dataframe[\"a\" : np.float, \"b\":str]'": 1,
            "\"pd.dataframe['a': np.float, 'b': int]\"": 1,
            "attribute(\n    value=name(\n        value='pd',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='dataframe',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [...]": 3,
            "'pd.dataframe[\"a\" : np.float : 1, \"b\":str:2]'": 2,
            "attribute(\n    value=name(\n        value='pd',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='dataframe',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [a]": 1,
            "'ks.dataframe[\"a\" : np.float : 1, \"b\":str:2]'": 3,
            "attribute(\n    value=name(\n        value='ks',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='dataframe',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [a]": 1,
            "attribute(\n    value=name(\n        value='ks',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='dataframe',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [pdf]": 1,
            "\"internalframe\"": 4,
            "optional [tuple]": 1,
            "union [\"dataframegroupby\",\"seriesgroupby\"]": 1,
            "optional [\"dataframe\"]": 10,
            "optional [\"series\"]": 6,
            "sparkindexopsmethods": 1,
            "column": 4,
            "\"ks.index\"": 6,
            "sparkdataframe": 2,
            "storagelevel": 3,
            "np.dtype": 2,
            "tuple [\"series\",\"series\"]": 2,
            "optional [union [\"series\",dataframe]]": 1,
            "mapping": 1,
            "union [scalar,\"series\"]": 7,
            "union [\"series\",dataframe]": 2,
            "union [tuple,any]": 2,
            "union [int,float]": 1,
            "union [\"ks.series\",\"dataframe\",\"ks.index\"]": 3,
            "iterator": 2,
            "union [list,mapping]": 1,
            "styler": 1,
            "np.recarray": 1,
            "tuple [int,int]": 1,
            "union [\"dataframe\",\"ks.series\"]": 3,
            "np.ndarray": 8,
            "optional [\"index\"]": 4,
            "scalar": 5,
            "union [scalar,tuple [scalar,...]]": 6,
            "\"multiindex\"": 18,
            "tuple [int,...]": 2,
            "index": 34,
            "tuple [scalar,...]": 2,
            "atindexer": 1,
            "iatindexer": 1,
            "ilocindexer": 1,
            "locindexer": 1,
            "union [\"ks.series\",\"ks.dataframe\",scalar]": 2,
            "optional [list [optional [tuple]]]": 1,
            "union [list [optional [tuple]],_novaluetype]": 1,
            "tuple [optional [list [str]],optional [list [tuple]]]": 1,
            "union [\"series\",\"dataframe\"]": 1,
            "union [dataframe,series]": 32,
            "rollinggroupby": 1,
            "expandinggroupby": 1,
            "union [\"series\",pd]": 1,
            "union [\"ks.series\",\"ks.index\"]": 18,
            "union [\"ks.index\",\"ks.series\"]": 1,
            "union [scalar,\"ks.series\"]": 9,
            "union [\"ks.dataframe\",\"ks.series\"]": 9,
            "rolling": 1,
            "expanding": 1,
            "union [scalar,\"ks.dataframe\",\"ks.series\"]": 1,
            "list [tuple]": 4,
            "union [dataframe,series,ordereddict]": 1,
            "list [dataframe]": 1,
            "union [series,dataframe]": 1,
            "attribute(\n    value=name(\n        value='matplotlib',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='axes',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n).axes": 3,
            "union [any,tuple [any,...]]": 2,
            "union [\"series\",scalar]": 1,
            "union [\"dataframe\",\"series\"]": 2,
            "set [tuple]": 1,
            "union [str,int]": 4,
            "\"indexopsmixin\"": 8,
            "union [float,iterable [float]]": 2,
            "union [scalar,\"series\",iterable]": 1,
            "union [dataframe,\"series\"]": 1,
            "tuple [\"series\",union [dataframe,\"series\"]]": 1,
            "union [any,tuple]": 4,
            "tuple [optional [list [spark]],optional [list [tuple]]]": 1,
            "list [union [any,tuple]]": 2,
            "union [any,tuple,list [union [any,tuple]]]": 1,
            "union [tuple,spark]": 3,
            "union [\"series\",\"index\"]": 6,
            "union [str,type,dtype]": 1,
            "optional [list [dtype]]": 5,
            "list [dtype]": 2,
            "optional [union [list [dtype],_novaluetype]]": 2,
            "optional [dtype]": 1,
            "datetimeindex": 1,
            "\"datetimeindex\"": 5,
            "tuple [union [\"series\",\"index\"],pd]": 2,
            "dict [str,dtype]": 1,
            "dict [str,categoricaldtype]": 1,
            "tuple [pd,list [str],list [dtype],list [str],list [dtype]]": 1,
            "union [datetime,str]": 9,
            "attribute(\n    value=name(\n        value='pd',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='series',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [pdf]": 1,
            "attribute(\n    value=name(\n        value='ks',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='series',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [pdf]": 1,
            "dtype": 2,
            "list [types]": 1,
            "attribute(\n    value=name(\n        value='ks',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='dataframe',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [...]": 1,
            "attribute(\n    value=name(\n        value='ks',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='series',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [kdf]": 1,
            "attribute(\n    value=name(\n        value='ks',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='series',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [dtype]": 5,
            "union [str,dateoffset]": 4,
            "'ks.dataframe[\"a\":str, \"b\":str]'": 2,
            "ret": 3,
            "attribute(\n    value=name(\n        value='ks',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='dataframe',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [return_types]": 2,
            "optional [union [seriestype,scalartype]]": 1,
            "attribute(\n    value=name(\n        value='ks',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='series',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [str]": 1
        },
        "RQ2_3": "What types are removed (generic, numeric, ...)?",
        "anyType_removed": 0,
        "noneType_removed": 0,
        "numericType_removed": 0,
        "binarySequenceType_removed": 0,
        "textSequenceType_removed": 0,
        "mappingTypes_removed": 0,
        "setTypes_removed": 0,
        "sequenceType_removed": 0,
        "newType_removed": 0,
        "total_removed": 357,
        "RQ2_4": "What are the top 5 types removed?",
        "typeRemoved_dict": {
            "col [np]": 4,
            "dataframe": 22,
            "x": 10,
            "spark.column": 8,
            "datatype": 3,
            "pd.dataframe": 3,
            "_frame": 1,
            "union [columnlike]": 1,
            "series": 4,
            "spark.dataframe": 7,
            "list [str]": 7,
            "list [indexinfo]": 2,
            "ks.dataframe": 1,
            "optional [list [indexinfo]]": 2,
            "optional [list [str]]": 5,
            "int": 10,
            "bool": 36,
            "ks.series": 17,
            "str": 19,
            "none": 15,
            "metadata": 3,
            "list [indexmap]": 3,
            "'series'": 2,
            "optional [list [indexmap]]": 2,
            "list [optional [str]]": 1,
            "'metadata'": 2,
            "pd.index": 4,
            "'ks.series'": 1,
            "optional [int]": 3,
            "union [str,_novaluetype]": 2,
            "any": 6,
            "union [tuple [type,...],type]": 1,
            "tuple [callable [...,bool],str]": 1,
            "optional [spark]": 4,
            "'multiindex'": 1,
            "structtype": 1,
            "union [list [str],_novaluetype]": 2,
            "list": 2,
            "callable": 1,
            "float": 1,
            "union ['series',none]": 1,
            "union [str,tuple [str,...]]": 9,
            "optional [list [tuple [str,...]]]": 2,
            "union [list [tuple [str,...]],_novaluetype]": 1,
            "optional [union [list [str],_novaluetype]]": 1,
            "list [tuple [str,...]]": 2,
            "optional [list [spark]]": 1,
            "union [spark,_novaluetype]": 2,
            "union [list [spark],_novaluetype]": 1,
            "series [np]": 2,
            "pd.series": 1,
            "typing.callable": 2,
            "types.datatype": 5,
            "\"ks.series\"": 3,
            "set [tuple [str,...]]": 1,
            "attribute(\n    value=name(\n        value='ks',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='series',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [int]": 1,
            "union [\"indexopsmixin\"]": 1,
            "\"ks.dataframe\"": 2,
            "optional [union [str,list [str]]]": 3,
            "optional [str]": 4,
            "union [str,list [str],none]": 2,
            "optional [bool]": 1,
            "\"cacheddataframe\"": 1,
            "tuple [str,...]": 3,
            "internalframe": 3,
            "optional [union [spark,_novaluetype]]": 1,
            "\"series\"": 7,
            "optional [dict [str,optional [tuple]]]": 1,
            "optional [union [dict [str,optional [tuple]],_novaluetype]]": 1,
            "list [optional [tuple]]": 1,
            "\"dataframe\"": 2,
            "rolling": 1,
            "\"indexopsmixin\"": 4,
            "\"index\"": 23,
            "attribute(\n    value=name(\n        value='matplotlib',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='axes',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n).axes": 3,
            "union [dataframe,list]": 2,
            "union [any,tuple]": 3,
            "list [union [any,tuple]]": 2,
            "union [any,tuple,list [union [any,tuple]]]": 1,
            "scalar": 2,
            "tuple": 4,
            "np.ndarray": 3,
            "optional [\"index\"]": 2,
            "union [scalar,tuple [scalar,...]]": 3,
            "\"multiindex\"": 9,
            "tuple [int,...]": 1,
            "pd.multiindex": 2,
            "index": 2,
            "tuple [scalar,...]": 1,
            "optional [\"series\"]": 1
        },
        "RQ2_5": "What types are the top 10 changed ?",
        "total_changed": 619,
        "typeChanged_dict_var": {},
        "typeChanged_dict_arg": {
            "list [columnlike] -> list [series]": 2,
            "int -> union [int,str]": 3,
            "str -> optional [union [str,list [str]]]": 1,
            "ks.series -> 'ks.series'": 1,
            "str -> str_type": 1,
            "int -> optional [union [int,list [int]]]": 2,
            "optional [spark] -> union [spark,_novaluetype]": 2,
            "optional [list [indexmap]] -> union [list [indexmap],_novaluetype]": 1,
            "optional [list [str]] -> union [list [str],_novaluetype]": 1,
            "union [str,list [str]] -> list [column]": 1,
            "union [str,list [str]] -> union [str,tuple [str],list [str],list [tuple [str]]]": 1,
            "str -> any": 1,
            "union [str,_novaluetype] -> union [any,_novaluetype]": 2,
            "union [any,_novaluetype] -> union [str,_novaluetype]": 1,
            "union [str,tuple [str],list [str],list [tuple [str]]] -> union [str,tuple [str,...],list [str],list [tuple [str,...]]]": 1,
            "list [str] -> list [union [str,tuple [str,...]]]": 2,
            "str -> union [str,tuple [str,...]]": 2,
            "optional [list [tuple [str]]] -> optional [list [tuple [str,...]]]": 1,
            "union [str,tuple [str]] -> union [str,tuple [str,...]]": 3,
            "union [list [tuple [str]],_novaluetype] -> union [list [tuple [str,...]],_novaluetype]": 1,
            "list [tuple [str]] -> list [tuple [str,...]]": 1,
            "optional [union [str,list [str]]] -> union [str,list [str],tuple [str,...],list [tuple [str,...]]]": 3,
            "optional [union [str,list [str]]] -> optional [union [str,list [str],tuple [str,...],list [tuple [str,...]]]]": 1,
            "optional [spark] -> optional [list [spark]]": 1,
            "union [list [str],_novaluetype] -> optional [union [list [str],_novaluetype]]": 1,
            "union [str,list [str]] -> union [str,list [str],tuple [str,...],list [tuple [str,...]]]": 1,
            "union [list [tuple [str,...]],_novaluetype] -> optional [list [tuple [str,...]]]": 1,
            "list [union [spark,'ks.series']] -> list [union [spark,'series']]": 1,
            "union [spark,'ks.series'] -> union [spark,'series']": 1,
            "union [str,tuple [str,...]] -> union [str,tuple [str,...],list [union [str,tuple [str,...]]]]": 1,
            "'ks.series' -> \"ks.series\"": 2,
            "'any' -> \"any\"": 2,
            "'dataframe' -> \"dataframe\"": 5,
            "list [union [spark,'series']] -> list [union [spark,\"series\"]]": 1,
            "union [spark,'series'] -> union [spark,\"series\"]": 1,
            "'ks.dataframe' -> \"ks.dataframe\"": 2,
            "union ['pd.dataframe','pd.series'] -> union [\"pd.dataframe\",\"pd.series\"]": 1,
            "union [str,'structtype'] -> union [str,\"structtype\"]": 1,
            "'series' -> \"series\"": 2,
            "union [str,list [str],tuple [str,...],list [tuple [str,...]]] -> optional [union [str,list [str],tuple [str,...],list [tuple [str,...]]]]": 3,
            "optional [list [indexmap]] -> optional [dict [str,optional [tuple [str,...]]]]": 1,
            "union [list [indexmap],_novaluetype] -> optional [union [dict [str,optional [tuple [str,...]]],_novaluetype]]": 1,
            "union [list [tuple [str,...]],_novaluetype] -> optional [union [list [tuple [str,...]],_novaluetype]]": 1,
            "union [\"ks.dataframe\",spark] -> union [\"dataframe\",spark]": 1,
            "bool -> optional [bool]": 1,
            "list [series] -> list [union [series,tuple [str,...]]]": 2,
            "list [union [str,tuple [str,...]]] -> list [tuple [str,...]]": 1,
            "_internalframe -> internalframe": 2,
            "union [\"pd.dataframe\",\"pd.series\"] -> union [\"pd.dataframe\",\"pd.series\",\"pd.index\"]": 1,
            "int -> union [int,\"series\"]": 1,
            "union [\"dataframe\",\"indexopsmixin\"] -> union [\"dataframe\",\"indexopsmixin\",\"internalframe\"]": 2,
            "union [str,list [str],none] -> optional [union [str,list [str]]]": 6,
            "union [str,tuple] -> optional [union [str,tuple]]": 1,
            "optional [list [str]] -> optional [list [optional [tuple [str,...]]]]": 1,
            "optional [union [list [str],_novaluetype]] -> optional [union [list [optional [tuple [str,...]]],_novaluetype]]": 2,
            "optional [dict [str,optional [tuple [str,...]]]] -> optional [dict [str,optional [tuple]]]": 1,
            "optional [list [tuple [str,...]]] -> optional [list [tuple]]": 18,
            "optional [union [list [optional [tuple [str,...]]],_novaluetype]] -> optional [union [list [optional [tuple]],_novaluetype]]": 2,
            "optional [union [dict [str,optional [tuple [str,...]]],_novaluetype]] -> optional [union [dict [str,optional [tuple]],_novaluetype]]": 1,
            "optional [union [list [tuple [str,...]],_novaluetype]] -> optional [union [list [tuple],_novaluetype]]": 1,
            "union [str,tuple [str,...]] -> union [str,tuple]": 1,
            "optional [list [optional [tuple [str,...]]]] -> optional [list [optional [tuple]]]": 1,
            "union [str,tuple [str,...]] -> union [any,tuple]": 5,
            "list [union [str,tuple [str,...]]] -> list [union [any,tuple]]": 1,
            "union [str,tuple [str,...],list [union [str,tuple [str,...]]]] -> union [any,tuple,list [union [any,tuple]]]": 1,
            "union [list [str],dict [str,list [str]]] -> union [list [str],dict [any,list [str]]]": 1,
            "union [str,tuple [str,...],list [str],list [tuple [str,...]]] -> union [any,tuple,list [any],list [tuple]]": 3,
            "union [str,list [str],tuple [str,...],list [tuple [str,...]]] -> union [any,list [any],tuple,list [tuple]]": 4,
            "optional [union [str,list [str],tuple [str,...],list [tuple [str,...]]]] -> optional [union [any,list [any],tuple,list [tuple]]]": 5,
            "optional [tuple] -> any": 1,
            "list [union [series,tuple [str,...]]] -> list [union [series,tuple]]": 4,
            "set [tuple [str,...]] -> set [tuple]": 1,
            "list [tuple [str,...]] -> list [tuple]": 2,
            "tuple [str,...] -> tuple": 6,
            "union [str,tuple] -> union [any,tuple]": 1,
            "union [\"pd.dataframe\",\"pd.series\",\"pd.index\"] -> union [pd,pd,pd]": 1,
            "optional [str] -> str": 1
        },
        "typeChanged_dict_ret": {
            "list [indexinfo] -> list [str]": 1,
            "list [optional [str]] -> list [indexmap]": 1,
            "list [str] -> list [optional [str]]": 1,
            "dataframe -> union ['ks.series','ks.dataframe']": 1,
            "union ['ks.series','ks.dataframe'] -> union ['series','dataframe']": 1,
            "'dataframe' -> optional ['dataframe']": 1,
            "ks.series -> 'ks.series'": 18,
            "'series' -> list [indexmap]": 1,
            "none -> metadata": 1,
            "none -> 'series'": 1,
            "col [np] -> series [np]": 2,
            "attribute(\n    value=name(\n        value='koalas',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='col',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [int] -> attribute(\n    value=name(\n        value='koalas',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='series',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [int]": 1,
            "list [spark] -> pd.index": 1,
            "spark.dataframe -> spark.column": 2,
            "list [str] -> list [spark]": 4,
            "list [indexmap] -> list [spark]": 1,
            "spark.dataframe -> optional [list [tuple [str]]]": 1,
            "pd.index -> int": 1,
            "spark.dataframe -> optional [list [str]]": 1,
            "optional [list [tuple [str]]] -> list [tuple [str]]": 1,
            "optional [list [str]] -> int": 1,
            "spark.column -> dict [tuple [str],str]": 1,
            "datatype -> str": 2,
            "str -> any": 1,
            "str -> union [str,tuple [str,...]]": 3,
            "list [str] -> list [union [str,tuple [str,...]]]": 1,
            "dict [tuple [str],str] -> dict [tuple [str,...],str]": 1,
            "list [optional [str]] -> list [optional [tuple [str,...]]]": 1,
            "list [tuple [str]] -> list [tuple [str,...]]": 1,
            "any -> pd.multiindex": 1,
            "attribute(\n    value=name(\n        value='koalas',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='series',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [int] -> attribute(\n    value=name(\n        value='ks',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='series',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [int]": 1,
            "list [indexmap] -> 'series'": 1,
            "union [str,tuple [str,...]] -> bool": 2,
            "spark.column -> dict [tuple [str,...],spark]": 1,
            "int -> union ['series',none]": 1,
            "pd.multiindex -> dataframe": 1,
            "tuple [pyspark,list [str]] -> tuple [pyspark,list [tuple [str,...]]]": 1,
            "'ks.series' -> \"ks.series\"": 87,
            "'dataframe' -> \"dataframe\"": 13,
            "optional ['dataframe'] -> optional [\"dataframe\"]": 2,
            "'index' -> \"index\"": 1,
            "'_internalframe' -> \"_internalframe\"": 4,
            "union ['series','dataframe'] -> union [\"series\",\"dataframe\"]": 1,
            "'series' -> \"series\"": 11,
            "union ['series',none] -> union [\"series\",none]": 1,
            "optional ['series'] -> optional [\"series\"]": 1,
            "any -> \"index\"": 1,
            "any -> \"multiindex\"": 1,
            "dict [tuple [str,...],str] -> str": 1,
            "str -> datatype": 1,
            "dict [tuple [str,...],spark] -> spark.dataframe": 1,
            "datatype -> optional [spark]": 1,
            "spark.dataframe -> list [str]": 1,
            "list [spark] -> list [str]": 2,
            "list [spark] -> dict [str,optional [tuple [str,...]]]": 1,
            "optional [spark] -> list [tuple [str,...]]": 1,
            "\"multiindex\" -> any": 1,
            "pd.series -> \"ks.series\"": 1,
            "\"ks.series\" -> union [\"ks.series\",\"ks.dataframe\"]": 2,
            "\"ks.series\" -> \"ks.series[np.int64]\"": 5,
            "\"ks.series\" -> \"ks.series[bool]\"": 20,
            "\"ks.series\" -> \"ks.series[np.datetime64]\"": 4,
            "\"ks.series\" -> \"ks.series[str]\"": 20,
            "\"ks.series\" -> \"ks.series[int]\"": 3,
            "union [\"ks.series\",\"ks.dataframe\"] -> \"ks.series[str]\"": 1,
            "tuple [dataframe,list [series],list [tuple [str,...]]] -> tuple [dataframe,list [series],set [tuple [str,...]]]": 1,
            "\"_internalframe\" -> \"internalframe\"": 4,
            "spark.dataframe -> pd.dataframe": 1,
            "attribute(\n    value=name(\n        value='typing',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='union',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [seriestype,dataframetype,scalartype,unknowntype] -> types.datatype": 1,
            "spark.dataframe -> bool": 2,
            "union [\"series\",\"dataframe\"] -> union [\"series\",\"dataframe\",\"index\"]": 1,
            "\"index\" -> internalframe": 1,
            "\"series\" -> internalframe": 1,
            "optional [spark] -> list [str]": 1,
            "tuple [list [tuple [str,...]],optional [list [spark]],bool] -> tuple [list [tuple [str,...]],optional [list [spark]],bool,optional [tuple [str,...]]]": 17,
            "optional [list [str]] -> list [optional [tuple [str,...]]]": 1,
            "none -> dataframe": 1,
            "internalframe -> dataframe": 1,
            "tuple [list [tuple [str,...]],optional [list [spark]],bool,optional [tuple [str,...]]] -> tuple [list [tuple],optional [list [spark]],bool,optional [tuple]]": 17,
            "union [str,tuple [str,...]] -> union [any,tuple]": 3,
            "list [union [str,tuple [str,...]]] -> list [union [any,tuple]]": 1,
            "list [tuple [str,...]] -> list [tuple]": 2,
            "\"ks.series[str]\" -> \"ks.series\"": 1,
            "tuple [dataframe,list [series],set [tuple [str,...]]] -> tuple [dataframe,list [series],set [tuple]]": 1,
            "dict [str,optional [tuple [str,...]]] -> dict [str,optional [tuple]]": 1,
            "list [optional [tuple [str,...]]] -> list [optional [tuple]]": 2,
            "tuple [pyspark,list [tuple [str,...]]] -> tuple [pyspark,list [tuple]]": 1,
            "union [\"series\",none] -> optional [\"series\"]": 1,
            "spark.dataframe -> sparkdataframe": 1,
            "\"ks.index\" -> \"ks.series\"": 1,
            "iterable -> iterator": 2,
            "optional [\"series\"] -> \"series\"": 1,
            "bool -> \"ks.series\"": 2,
            "\"dataframe\" -> union [\"dataframe\",\"ks.series\"]": 1,
            "list [tuple] -> int": 1,
            "dict [str,optional [tuple]] -> list [optional [tuple]]": 1,
            "optional [\"dataframe\"] -> optional [union [\"dataframe\",\"ks.series\"]]": 1,
            "series -> none": 1,
            "\"ks.series\" -> \"series\"": 10,
            "union [\"ks.series\",\"ks.index\"] -> union [\"series\",\"index\"]": 17,
            "union [\"ks.index\",\"ks.series\"] -> union [\"index\",\"series\"]": 1,
            "union [\"ks.series\",\"dataframe\",\"ks.index\"] -> union [\"series\",\"dataframe\",\"index\"]": 3,
            "union [\"dataframe\",\"ks.series\"] -> union [\"dataframe\",\"series\"]": 4,
            "\"ks.index\" -> \"index\"": 1,
            "styler -> \"styler\"": 1,
            "optional [union [\"dataframe\",\"ks.series\"]] -> optional [union [\"dataframe\",\"series\"]]": 1,
            "union [\"ks.series\",\"ks.dataframe\"] -> union [\"series\",\"dataframe\"]": 40,
            "union [scalar,\"ks.series\"] -> union [scalar,\"series\"]": 9,
            "union [\"ks.dataframe\",\"ks.series\"] -> union [\"dataframe\",\"series\"]": 4,
            "union [scalar,\"ks.dataframe\",\"ks.series\"] -> union [scalar,\"dataframe\",\"series\"]": 1,
            "union [\"ks.series\",\"ks.dataframe\",scalar] -> union [\"series\",\"dataframe\",scalar]": 2,
            "union [\"series\",\"dataframe\",\"index\"] -> union [series,dataframe,index]": 1,
            "union [any,tuple [any,...]] -> optional [union [scalar,tuple [scalar,...]]]": 2,
            "sparkdataframe -> dataframe": 1,
            "tuple [optional [list [str]],optional [list [tuple]]] -> tuple [optional [list [spark]],optional [list [tuple]]]": 1,
            "internalframe -> \"dataframe\"": 1,
            "str -> list": 1,
            "\"dataframe\" -> \"series\"": 1,
            "none -> \"index\"": 1,
            "pd.series -> \"dataframe\"": 1,
            "union [scalar,\"series\"] -> rolling": 1,
            "int -> \"series\"": 1,
            "\"series\" -> \"dataframe\"": 1,
            "union [int,float] -> \"series\"": 1,
            "int -> union [scalar,\"series\"]": 1,
            "column -> bool": 1,
            "optional [\"series\"] -> tuple [\"series\",pd]": 1,
            "\"dataframe\" -> none": 1,
            "\"dataframe\" -> tuple [\"dataframe\",union [\"dataframe\",\"series\"]]": 1,
            "union [any,tuple] -> str": 1,
            "tuple [optional [list [spark]],optional [list [tuple]]] -> \"dataframe\"": 1,
            "str -> spark.column": 1,
            "bool -> datatype": 1,
            "np.dtype -> dtype": 1,
            "tuple [list [tuple],optional [list [spark]],bool,optional [tuple]] -> tuple [list [tuple],optional [list [spark]],optional [list [dtype]],bool,optional [tuple]]": 16,
            "tuple [list [tuple],optional [list [spark]],bool,optional [tuple]] -> tuple [list [tuple],optional [list [spark]],any,bool,optional [tuple]]": 1,
            "spark.dataframe -> dtype": 1,
            "spark.dataframe -> list [dtype]": 1,
            "\"ks.series\" -> union [\"ks.series\",\"ks.index\"]": 1,
            "\"datetimeindex\" -> index": 1,
            "tuple [\"series\",pd] -> optional [\"series\"]": 1,
            "\"dataframe\" -> union [\"series\",\"dataframe\"]": 1,
            "\"dataframe\" -> attribute(\n    value=name(\n        value='ks',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='dataframe',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [return_types]": 1,
            "'ks.dataframe[\"a\" : np.float : 1, \"b\":str:2]' -> attribute(\n    value=name(\n        value='pd',\n        lpar=[],\n        rpar=[],\n    ),\n    attr=name(\n        value='series',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=dot(\n        whitespace_before=simplewhitespace(\n            value='',\n        ),\n        whitespace_after=simplewhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n) [pdf]": 1,
            "union [\"series\",\"dataframe\"] -> \"dataframe\"": 1
        },
        "s3": "------------------------------------------------------------------------",
        "RQ3_1": "Where are types added (function args, function returns, variables)?",
        "functionArgsType_added": 751,
        "functionReturnsType_added": 1149,
        "variableType_added": 6,
        "RQ3_2": "Where are types removed (function args, function returns, variables)?",
        "functionArgsType_removed": 161,
        "functionReturnsType_removed": 190,
        "variableType_removed": 6,
        "RQ3_3": "Where are types changed (function args, function returns, variables?",
        "functionArgsType_changed": 148,
        "functionReturnsType_changed": 471,
        "variableType_changed": 0,
        "s4": "------------------------------------------------------------------------",
        "RQ4_1": "Are types added along with other changes around this code or in commits that only add types?",
        "typeAnnotation_added_per_commit": 0,
        "list_typeAnnotation_added_per_commit": [],
        "RQ4_2": "Are types removed along with other changes around this code or in commits that only add types?",
        "typeAnnotation_removed_per_commit": 0,
        "list_typeAnnotation_removed_per_commit": [],
        "RQ4_3": "Are types changed along with other changes around this code or in commits that only add types?",
        "typeAnnotation_changed_per_commit": 0,
        "list_typeAnnotation_changed_per_commit": [
            0.5617977528089888,
            0.19187719859290053,
            0.19163206643244968,
            0.20304568527918782,
            0.22002200220022,
            0.09196811771919068,
            0.09196811771919068,
            0.544959128065395,
            0.7299270072992701,
            0.7352941176470588,
            1.2345679012345678,
            65.0,
            5.88235294117647,
            2.380952380952381,
            7.142857142857142,
            0.8620689655172413,
            1.9801980198019802,
            1.2658227848101267,
            5.263157894736842,
            0.8995502248875562,
            6.25,
            6.0606060606060606,
            2.4096385542168677,
            20.689655172413794,
            0.7751937984496124,
            7.4074074074074066,
            2.0408163265306123,
            6.25,
            5.88235294117647,
            1.5151515151515151,
            0.7042253521126761,
            1.6666666666666667,
            1.4285714285714286,
            2.857142857142857,
            0.7092198581560284,
            12.5,
            2.013422818791946,
            14.285714285714285,
            3.7037037037037033,
            3.6363636363636362,
            100.0,
            37.5,
            2.631578947368421,
            4.545454545454546,
            1.5151515151515151,
            1.36986301369863,
            1.4625228519195612,
            1.3793103448275863,
            1.4925373134328357,
            5.964912280701754,
            50.0,
            8.962264150943396,
            9.941520467836257,
            2.0202020202020203,
            2.9850746268656714,
            2.955665024630542,
            0.4878048780487805,
            0.9389671361502347,
            0.3389830508474576,
            1.3513513513513513,
            2.4096385542168677,
            2.2058823529411766,
            15.2,
            5.555555555555555,
            4.459691252144083,
            0.14124293785310735,
            3.296703296703297,
            4.49438202247191,
            4.158004158004158,
            0.205761316872428,
            1.4388489208633095,
            1.8181818181818181,
            3.8461538461538463,
            4.504504504504505,
            5.714285714285714,
            1.7699115044247788,
            2.2388059701492535,
            3.821656050955414,
            0.6993006993006993,
            3.125,
            7.377049180327869,
            2.312138728323699,
            0.8264462809917356,
            1.5663240332843857,
            0.4761904761904762,
            1.8518518518518516,
            1.9867549668874174,
            1.520912547528517,
            1.0169491525423728,
            1.2711864406779663,
            1.1811023622047243,
            0.847457627118644,
            1.015228426395939,
            4.093567251461988,
            0.7407407407407408,
            1.2903225806451613,
            2.4691358024691357,
            1.8404907975460123,
            2.604166666666667,
            5.88235294117647,
            5.263157894736842,
            4.545454545454546,
            1.36986301369863,
            3.79746835443038,
            4.761904761904762,
            1.1235955056179776,
            2.5316455696202533,
            1.7857142857142856,
            0.9950248756218906,
            0.5617977528089888,
            3.225806451612903,
            11.428571428571429,
            9.523809523809524,
            5.084745762711865,
            1.0869565217391304,
            1.574803149606299,
            11.11111111111111,
            3.4482758620689653,
            2.18978102189781,
            0.6802721088435374,
            0.23696682464454977,
            0.6802721088435374,
            2.18978102189781,
            0.23696682464454977,
            2.18978102189781,
            0.6802721088435374,
            0.23696682464454977,
            2.7027027027027026,
            5.555555555555555,
            4.166666666666666,
            0.8771929824561403,
            5.47945205479452,
            1.524390243902439,
            0.8733624454148471,
            2.961672473867596,
            25.0,
            22.22222222222222,
            0.7936507936507936,
            1.7241379310344827,
            1.8292682926829267,
            1.0204081632653061,
            0.8,
            0.7117437722419928,
            0.81799591002045,
            1.3888888888888888,
            0.5208333333333333,
            2.631578947368421,
            1.2738853503184715,
            0.5,
            0.11750881316098707,
            33.33333333333333,
            33.33333333333333,
            1.1904761904761905,
            2.4390243902439024,
            2.2222222222222223,
            2.127659574468085,
            3.4482758620689653,
            9.090909090909092,
            4.838709677419355,
            6.666666666666667,
            3.8461538461538463,
            25.0,
            2.380952380952381,
            0.628930817610063,
            1.0256410256410255,
            0.19455252918287938,
            33.33333333333333,
            3.4482758620689653,
            2.380952380952381,
            1.2345679012345678,
            1.2345679012345678,
            3.7037037037037033,
            1.5384615384615385,
            0.7722007722007722,
            1.4925373134328357,
            0.8264462809917356,
            1.2195121951219512,
            3.8461538461538463,
            0.7407407407407408,
            0.5586592178770949,
            33.33333333333333,
            1.0526315789473684,
            0.5154639175257731,
            3.508771929824561,
            0.38022813688212925,
            2.3255813953488373,
            28.57142857142857,
            0.8849557522123894,
            0.6622516556291391,
            1.4705882352941175,
            0.6557377049180327,
            10.0,
            11.76470588235294,
            1.3657056145675266,
            1.3719512195121952,
            0.5847953216374269,
            6.976744186046512,
            0.7923465195445475,
            1.8867924528301887,
            2.6455026455026456,
            1.0416666666666665,
            11.76470588235294,
            1.3513513513513513,
            1.4925373134328357,
            1.0955569080949483,
            2.7777777777777777,
            0.5076142131979695,
            0.4016064257028112,
            3.3333333333333335,
            0.9433962264150944,
            3.6809815950920246,
            1.1627906976744187,
            2.631578947368421,
            14.285714285714285,
            3.7037037037037033,
            1.098901098901099,
            3.225806451612903,
            3.0303030303030303,
            12.037037037037036,
            4.969879518072289,
            0.9735744089012517,
            2.5238095238095237,
            2.564102564102564,
            0.7633587786259541,
            3.571428571428571,
            1.3333333333333335,
            3.571428571428571,
            0.9615384615384616,
            4.069767441860465,
            1.0033444816053512,
            1.4492753623188406,
            0.8,
            2.7027027027027026,
            0.6134969325153374,
            7.6923076923076925,
            1.9607843137254901,
            1.2195121951219512,
            0.26905829596412556,
            4.25531914893617,
            1.4285714285714286,
            1.0526315789473684,
            1.0344827586206897,
            0.3194888178913738,
            1.3524936601859678,
            1.671891327063741,
            1.8140589569160999,
            20.833333333333336,
            20.0,
            2.5,
            0.3134796238244514,
            0.8620689655172413,
            2.380952380952381,
            1.1764705882352942,
            4.545454545454546,
            1.2515644555694618,
            0.5291005291005291,
            0.2542372881355932,
            4.444444444444445,
            4.651162790697675,
            2.380952380952381,
            0.4694835680751174,
            4.3478260869565215,
            1.694915254237288,
            3.6809815950920246,
            1.0752688172043012,
            0.24096385542168677,
            1.7543859649122806,
            0.78125,
            3.8834951456310676,
            4.580152671755725,
            1.0650887573964496,
            0.7874015748031495,
            1.5384615384615385,
            1.4084507042253522,
            7.317073170731707,
            33.33333333333333,
            33.33333333333333,
            1.2987012987012987,
            1.282051282051282,
            0.9708737864077669,
            1.0309278350515463,
            0.7751937984496124,
            2.0648967551622417,
            0.5050505050505051,
            2.1739130434782608,
            7.6923076923076925,
            3.278688524590164,
            1.9704433497536946,
            10.119047619047619,
            2.7027027027027026,
            1.3513513513513513,
            5.217391304347826,
            1.443001443001443,
            1.9230769230769231,
            2.3255813953488373,
            25.0,
            14.285714285714285,
            87.09677419354838,
            12.5,
            100.0,
            1.642710472279261,
            0.20408163265306123,
            30.357142857142854,
            1.1764705882352942,
            1.3513513513513513,
            0.5988023952095809,
            2.3255813953488373,
            2.73972602739726,
            69.11764705882352,
            59.61538461538461,
            0.53475935828877,
            0.7575757575757576,
            2.1739130434782608,
            3.9215686274509802,
            4.3478260869565215,
            0.4424778761061947,
            70.32967032967034,
            53.84615384615385,
            1.1961722488038278,
            0.7692307692307693,
            1.550387596899225,
            0.38461538461538464,
            34.074074074074076,
            0.78125,
            61.904761904761905,
            37.17948717948718,
            1.639344262295082,
            1.2195121951219512,
            1.8867924528301887,
            0.9345794392523363,
            92.10526315789474,
            34.285714285714285,
            1.5384615384615385,
            0.7751937984496124,
            0.37593984962406013,
            84.48275862068965,
            1.8018018018018018,
            21.62162162162162,
            1.1111111111111112,
            75.80645161290323,
            1.694915254237288,
            15.909090909090908,
            2.7027027027027026,
            100.0,
            1.3513513513513513,
            1.9230769230769231,
            1.282051282051282,
            0.38167938931297707,
            0.6097560975609756,
            0.8064516129032258,
            0.17331022530329288,
            2.5974025974025974,
            1.282051282051282,
            1.1494252873563218,
            1.9607843137254901,
            1.5625,
            6.666666666666667,
            1.4285714285714286,
            0.7042253521126761,
            3.4482758620689653,
            1.3824884792626728,
            1.4598540145985401,
            6.511627906976744,
            0.3215434083601286,
            1.0752688172043012,
            3.934426229508197,
            1.6877637130801686,
            0.5504587155963303,
            1.0638297872340425,
            2.2900763358778624,
            1.3605442176870748,
            0.7142857142857143,
            2.4875621890547266,
            2.857142857142857,
            1.9230769230769231,
            1.9801980198019802,
            0.9523809523809524,
            3.3333333333333335,
            1.7543859649122806,
            6.9306930693069315,
            0.3663003663003663,
            0.8333333333333334,
            0.4149377593360996,
            3.2520325203252036,
            2.209944751381215,
            0.5494505494505495,
            2.771362586605081,
            0.4454342984409799,
            2.727272727272727,
            0.9090909090909091,
            4.385964912280701,
            0.847457627118644,
            30.0,
            2.7559055118110236,
            2.9863728616990435,
            0.055073661021616406,
            0.8620689655172413,
            4.545454545454546,
            1.3445378151260505,
            1.4275517487508922,
            0.8298755186721992,
            2.4390243902439024,
            6.6115702479338845,
            0.974025974025974,
            1.282051282051282,
            0.4405286343612335,
            2.307692307692308,
            2.5974025974025974,
            1.1904761904761905,
            0.5434782608695652,
            5.263157894736842,
            1.639344262295082,
            2.484472049689441,
            1.4814814814814816,
            0.33670033670033667,
            2.088772845953003,
            5.529953917050691,
            5.9405940594059405,
            2.941176470588235,
            5.555555555555555,
            0.9174311926605505,
            2.7777777777777777,
            5.263157894736842,
            2.083333333333333,
            1.8181818181818181,
            3.937007874015748,
            0.6369426751592357,
            1.7142857142857144,
            3.488372093023256,
            2.857142857142857,
            3.1746031746031744,
            3.9215686274509802,
            3.0303030303030303,
            0.7407407407407408,
            6.741573033707865,
            3.007518796992481,
            3.508771929824561,
            3.076923076923077,
            3.2
        ],
        "annotation_related_insertion_edits_vs_all_commit": [],
        "annotation_related_deletion_edits_vs_all_commit": [],
        "s5": "------------------------------------------------------------------------",
        "RQ5": "Relation of properties of projects vs. properties of type changes.",
        "matrix_commits_stars_annotations": [
            [
                "2019",
                "1547",
                "2435",
                "2882",
                "288",
                "79",
                "1259",
                "2904",
                "58",
                "0",
                "0",
                "9383"
            ]
        ],
        "matrix_files_annotations": [],
        "matrix_test_files_annotations": [],
        "dict_funct_call_no_types": {},
        "dict_funct_call_types": {},
        "s6": "------------------------------------------------------------------------",
        "RQ6": "Which are the top 10 repository with the highest number of type annotations.",
        "number_type_annotations_per_repo": {
            "https://github.com/databricks/koalas": 2882
        },
        "s7": "------------------------------------------------------------------------",
        "RQ7": "How many of all types are annotated in the last version of the code?",
        "typeLastProjectVersion_total": 1022,
        "typeLastProjectVersion_average": 0,
        "typeLastProjectVersion_percentage": [
            53.62
        ],
        "typeLastProjectVersion_dict": {
            "https://github.com/databricks/koalas": 1022
        },
        "typeLastProjectVersion_dict_error": {},
        "RQ8": "Total number of annotations over time, across all projects",
        "typeAnnotation_year_analysis": {
            "2019": 596,
            "2020": 976,
            "2021": 334
        },
        "RQ9": "Total number of annotation-related commit over time, across all projects",
        "typeAnnotation_commit_annotation_year_analysis": {
            "2019": 109,
            "2020": 104,
            "2021": 42
        },
        "typeAnnotation_commit_not_annotation_year_analysis": {
            "2019": 678,
            "2020": 516,
            "2021": 81
        },
        "RQ10": "Type annotation coverage for each each",
        "annotation_coverage": {
            "2014": [
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "2015": [
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "2016": [
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "2017": [
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "2018": [
                0,
                0,
                0,
                0,
                0,
                0
            ],
            "2019": [
                198,
                2409,
                82,
                1077,
                0,
                3009
            ],
            "2020": [
                355,
                3585,
                140,
                1860,
                0,
                5466
            ]
        },
        "RQ11": "Developers statistics",
        "list_dev_dict": [
            {
                "databricks-koalas": 0,
                "timhunter@databricks.com": 2,
                "ueshin@happy-camper.st": 4,
                "gurwls223@apache.org": 45,
                "ueshin@databricks.com": 86,
                "rxin@databricks.com": 14,
                "33159547+floscha@users.noreply.github.com": 9,
                "abishekganesh72@gmail.com": 1,
                "ice.xelloss@gmail.com": 2,
                "tim@databricks.com": 1,
                "patryk-oleniuk@users.noreply.github.com": 1,
                "hjoo@users.noreply.github.com": 2,
                "6234127@gmail.com": 4,
                "gurwls223@gmail.com": 1,
                "20029252+garawalid@users.noreply.github.com": 1,
                "kaiqi@kth.se": 4,
                "44108233+itholic@users.noreply.github.com": 30,
                "weichen.xu@databricks.com": 1,
                "hkawamura0130@gmail.com": 1,
                "1934965+jijosg@users.noreply.github.com": 1,
                "44552904+LucasG0@users.noreply.github.com": 4,
                "47337188+xinrong-databricks@users.noreply.github.com": 38,
                "56136443+LSturtew@users.noreply.github.com": 1,
                "54780428+awdavidson@users.noreply.github.com": 2
            }
        ],
        "list_dev_dict_total": [
            {
                "databricks-koalas": 0,
                "rxin@databricks.com": 63,
                "timhunter@databricks.com": 7,
                "ueshin@happy-camper.st": 40,
                "gatorsmile@gmail.com": 2,
                "tim@databricks.com": 8,
                "abdealikothari@gmail.com": 3,
                "gurwls223@gmail.com": 20,
                "OwenZhang1990@gmail.com": 1,
                "ueshin@databricks.com": 512,
                "gurwls223@apache.org": 369,
                "43762594+margaret-databricks@users.noreply.github.com": 1,
                "1999830+gstaubli@users.noreply.github.com": 1,
                "20029252+garawalid@users.noreply.github.com": 12,
                "shril.iitdhn@gmail.com": 7,
                "33159547+floscha@users.noreply.github.com": 18,
                "abishekganesh72@gmail.com": 2,
                "ivan.sadikov@databricks.com": 1,
                "stephanie.bodoff@databricks.com": 2,
                "nitlev@users.noreply.github.com": 2,
                "33762992+athena15@users.noreply.github.com": 1,
                "gliptak@gmail.com": 2,
                "ice.xelloss@gmail.com": 2,
                "patryk-oleniuk@users.noreply.github.com": 1,
                "6234127@gmail.com": 31,
                "hjoo@users.noreply.github.com": 2,
                "dvgodoy@gmail.com": 2,
                "hkawamura0130@gmail.com": 22,
                "hari.subbaraj@gmail.com": 1,
                "akhilputhiry@gmail.com": 1,
                "44108233+itholic@users.noreply.github.com": 256,
                "kaiqidong1991@gmail.com": 1,
                "kaiqi@kth.se": 24,
                "thoo@users.noreply.github.com": 3,
                "joy@databricks.com": 4,
                "weichen.xu@databricks.com": 1,
                "seungfwani@gmail.com": 4,
                "joker.like-that@hotmail.co.jp": 1,
                "guyao@guyao.me": 2,
                "denny.g.lee@gmail.com": 1,
                "cleanby@naver.com": 15,
                "deepyaman.datta@utexas.edu": 5,
                "lukasz.tracewski@outlook.com": 1,
                "haejoon309@naver.com": 2,
                "44552904+LucasG0@users.noreply.github.com": 9,
                "90woozz@gmail.com": 3,
                "rigdoncook@gmail.com": 1,
                "1934965+jijosg@users.noreply.github.com": 1,
                "ratin.kumar.2k@gmail.com": 2,
                "thomas.spura@gmail.com": 2,
                "46514371+shengjh@users.noreply.github.com": 1,
                "50170698+sllynn@users.noreply.github.com": 1,
                "47337188+xinrong-databricks@users.noreply.github.com": 63,
                "xinrong.meng@databricks.com": 3,
                "lfdversluis@users.noreply.github.com": 1,
                "56136443+LSturtew@users.noreply.github.com": 1,
                "54780428+awdavidson@users.noreply.github.com": 2,
                "43343135+Cedric-Magnan@users.noreply.github.com": 1
            }
        ],
        "dev_dict": {},
        "dev_dict_total": {},
        "list_dev_plot": []
    }
]